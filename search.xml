<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[第一次面试总结]]></title>
      <url>https://xu455255849.github.io/2016/08/08/%E7%AC%AC%E4%B8%80%E6%AC%A1%E9%9D%A2%E8%AF%95%E6%80%BB%E7%BB%93/</url>
      <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>人生第一次面试，面试地点比较远，在云栖小镇，路上风景真是不错，有种依山傍水的感觉。<br>回到家已经下午了，面试感觉还行，面试官没有像我预料的问比较多的html5，css3的基础性问题<br>问题比较综合，这里总结一下。心情有点紧张，有些可能已经想不起来了，能写多少是多少。</p>
<p>（顺序不分先后 我是想到啥问题写啥问题）</p>
<h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><h2 id="了解过html5和css3吗？"><a href="#了解过html5和css3吗？" class="headerlink" title="了解过html5和css3吗？"></a>了解过html5和css3吗？</h2><p>a：了解过，我用css3 canvas做了一个小游戏，在这个过程中也了解了下cocos2d，目前感觉还是比较难的。</p>
<h2 id="博客的效果都是自己做的吗？"><a href="#博客的效果都是自己做的吗？" class="headerlink" title="博客的效果都是自己做的吗？"></a>博客的效果都是自己做的吗？</h2><p>a：我的博客是基于node.js的hexo框架制作的，特效并不是自己做的。但是内容都是自己做的。</p>
<h2 id="使用过浮动布局吗？浮动会脱离文档流吗？使用浮动会造成什么问题？"><a href="#使用过浮动布局吗？浮动会脱离文档流吗？使用浮动会造成什么问题？" class="headerlink" title="使用过浮动布局吗？浮动会脱离文档流吗？使用浮动会造成什么问题？"></a>使用过浮动布局吗？浮动会脱离文档流吗？使用浮动会造成什么问题？</h2><p>a：用过，会脱离文档流，对BFC机制做过一定的了解。</p>
<h2 id="感觉自己解决问题的能力怎么样，能独立完成一些动态效果的制作吗？"><a href="#感觉自己解决问题的能力怎么样，能独立完成一些动态效果的制作吗？" class="headerlink" title="感觉自己解决问题的能力怎么样，能独立完成一些动态效果的制作吗？"></a>感觉自己解决问题的能力怎么样，能独立完成一些动态效果的制作吗？</h2><p>a：因为我是自学的，碰到过蛮多问题，基本上都是自己查资料，百度解决，感觉自己解决问题的能力还是比较强的。<br>能独立完成一些动态效果的制作。</p>
<h2 id="了解过bootstrap的响应式机制吗？熟悉各种col所对应分辨率吗？（针对我的bootstrap项目）"><a href="#了解过bootstrap的响应式机制吗？熟悉各种col所对应分辨率吗？（针对我的bootstrap项目）" class="headerlink" title="了解过bootstrap的响应式机制吗？熟悉各种col所对应分辨率吗？（针对我的bootstrap项目）"></a>了解过bootstrap的响应式机制吗？熟悉各种col所对应分辨率吗？（针对我的bootstrap项目）</h2><p>a：了解过，通过css3的媒介查询，探测屏幕大小来达到响应式的机制，目前还比较缺少实践，没有做过移动端相关的项目，没有那么深入了解过。</p>
<h2 id="了解querySelector选择器吗？和SelectorAll有什么区别？返回的是什么？和数组有什么区别？"><a href="#了解querySelector选择器吗？和SelectorAll有什么区别？返回的是什么？和数组有什么区别？" class="headerlink" title="了解querySelector选择器吗？和SelectorAll有什么区别？返回的是什么？和数组有什么区别？"></a>了解querySelector选择器吗？和SelectorAll有什么区别？返回的是什么？和数组有什么区别？</h2><p>a：了解过，jq的元素获取就是通过这种方式，不all的话获取一个匹配节点，all则获取匹配的所有css选择器节点。<br>返回的是一个集合，没了解那么深入。</p>
<p>修正及补充：</p>
<p>querySelectorAll方法返回匹配指定的CSS选择器的所有节点，返回的是NodeList类型的对象。NodeList对象不 是动态集合，所以元素节点的变化无法实时反映在返回结果中。与querySelector方法一样，querySelectorAll方法无法选中CSS伪元素       －－－－－－－阮一峰 javascript标准教程</p>
<p>getElementsBy返回的NodeList是一个动态集合，每调用一次就会改变集合。</p>
<p> (我自己测试 输出 [object NodeList] ，说明all返回的是一个节点列表对象 和数组有区别<br> 对象获取长度的方法：</p>
<p> Object.keys(o).length ；<br> Object.getOwnPropertyNames(o).length) ；</p>
<p>getOwnPropertyNames可以获取不可枚举的属性 例如数组的length<br>  )</p>
<h2 id="说说用原生js写一个图片轮播的基本思路，手动点击下一张？（针对我的jq轮播项目）"><a href="#说说用原生js写一个图片轮播的基本思路，手动点击下一张？（针对我的jq轮播项目）" class="headerlink" title="说说用原生js写一个图片轮播的基本思路，手动点击下一张？（针对我的jq轮播项目）"></a>说说用原生js写一个图片轮播的基本思路，手动点击下一张？（针对我的jq轮播项目）</h2><p>a： 先定义一个slider框，在框里放上要显示的图片，让图片大小占满框，再定义2个按钮</p>
<p>通过getbyid找到按钮 编写按钮对应的点击事件（没有用原生写过。回答的时候有点乱。）</p>
<h2 id="window-onload和-document-ready有什么区别？"><a href="#window-onload和-document-ready有什么区别？" class="headerlink" title="window.onload和$(document).ready有什么区别？"></a>window.onload和$(document).ready有什么区别？</h2><p>a：onload会在页面解析到该语句时运行，而ready是文档加载完成后运行。<br>(尴尬。。虽然知道这东西却没深入了解过。。。)</p>
<p>修正：</p>
<p>load事件发生在文档在浏览器窗口加载完毕时。window.onload属性可以指定这个事件的回调函数。</p>
<p><code>window.onload = function() {
  var elements = document.getElementsByClassName(&#39;example&#39;);
  for (var i = 0; i &lt; elements.length; i++) {
    var elt = elements[i];
    // ...
  }
};</code></p>
<p>1.执行时间 </p>
<pre><code>window.onload必须等到页面内包括图片的所有元素加载完毕后才能执行。 
$(document).ready()是DOM结构绘制完毕后就执行，不必等到加载完毕。 
</code></pre><p>2.编写个数不同 </p>
<pre><code>window.onload不能同时编写多个，如果有多个window.onload方法，只会执行一个 
$(document).ready()可以同时编写多个，并且都可以得到执行 
</code></pre><p>3.简化写法 </p>
<pre><code>window.onload没有简化写法 
$(document).ready(function(){})可以简写成$(function(){});         
</code></pre><h2 id="了解过我们公司吗？"><a href="#了解过我们公司吗？" class="headerlink" title="了解过我们公司吗？"></a>了解过我们公司吗？</h2><p>a：了解过，相当于中介平台，让设计师入驻平台，给需要设计服务的人提供服务。</p>
<h2 id="你觉得你抗压能力怎么样？"><a href="#你觉得你抗压能力怎么样？" class="headerlink" title="你觉得你抗压能力怎么样？"></a>你觉得你抗压能力怎么样？</h2><p>a：很强，加班什么的不是问题。</p>
<h2 id="你对你的工作环境有什么要求？"><a href="#你对你的工作环境有什么要求？" class="headerlink" title="你对你的工作环境有什么要求？"></a>你对你的工作环境有什么要求？</h2><p>a：没什么特殊的要求，可以专心投入工作就行。</p>
<h2 id="一周的任务，已经周5了，如果无法按时完成任务，你会怎么做？"><a href="#一周的任务，已经周5了，如果无法按时完成任务，你会怎么做？" class="headerlink" title="一周的任务，已经周5了，如果无法按时完成任务，你会怎么做？"></a>一周的任务，已经周5了，如果无法按时完成任务，你会怎么做？</h2><p>a：拼命赶工完成， （如果已经确保无法完成）那就比较尴尬了 只能和上级汇报情况了。（协商）</p>
<h2 id="学习前端有多久了？"><a href="#学习前端有多久了？" class="headerlink" title="学习前端有多久了？"></a>学习前端有多久了？</h2><p>a：从大二开始接触前端，在学校断断续续地学习，看的都比较基础，没有什么底子，<br>看多做少，这个暑假才开始学的比较深入。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[搭建基于node.js的聊天室]]></title>
      <url>https://xu455255849.github.io/2016/07/29/%E6%90%AD%E5%BB%BA%E5%9F%BA%E4%BA%8Enode-js%E7%9A%84%E8%81%8A%E5%A4%A9%E5%AE%A4/</url>
      <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>初学node.js 想做个聊天室 在互联网上漫游阅读了很多文章，也依样画葫芦开始搭建自己的聊天室。<br>这个聊天室是基于express框架和socket.io通信库搭建的。<br>这也是在socket.io官网的例子的基础上进行的修改的。</p>
<p> <a href="http://socket.io/get-started/chat/" target="_blank" rel="external">官网例子</a><br> <a href="https://github.com/xu455255849/chatroom" target="_blank" rel="external">我的修改版源码</a></p>
<h1 id="什么是socket-io"><a href="#什么是socket-io" class="headerlink" title="什么是socket.io"></a>什么是socket.io</h1><p>socket.io就是对Websocket的封装,并且实现了Websocket的服务端代码,在WebSocket没有出现之前，实现与服务端的实时通讯可以通过轮询来完成任务.。Socket.io将Websocket和轮询（Polling）机制以及其它的实时通信方式封装成了通用的接口，并且在服务端实现了这些实时机制的相应代码。也就是说，Websocket仅仅是Socket.io实现实时通信的一个子集。</p>
<p>那么，Socket.io都实现了Polling中的那些通信机制呢？</p>
<ul>
<li>Adobe® Flash® Socket</li>
<li>AJAX long polling</li>
<li>AJAX multipart streaming</li>
<li>Forever Iframe</li>
<li>JSONP Polling</li>
</ul>
<p>Adobe® Flash® Socket 大部分PC浏览器都支持的socket模式，不过是通过第三方嵌入到浏览器，不在W3C规范内，所以可能将逐步被淘汰，况且，大部分的手机浏览器都不支持这种模式。</p>
<p>AJAX long polling 这个很好理解，所有浏览器都支持这种方式，就是定时的向服务器发送请求，缺点是会给服务器带来压力并且出现信息更新不及时的现象。</p>
<p>AJAX multipart streaming  这是在XMLHttpRequest对象上使用某些浏览器（比如说Firefox）支持的multi-part标志。Ajax请求被发送给服务器端并保持打开状态（挂起状态），每次需要向客户端发送信息，就寻找一个挂起的的http请求响应给客户端，并且所有的响应都会通过统一连接来写入。</p>
<p>Forever Iframe （永存的Iframe）技术涉及了一个置于页面中的隐藏Iframe标签，该标签的src属性指向返回服务器端事件的servlet路径。每次在事件到达时，servlet写入并刷新一个新的script标签，该标签内部带有JavaScript代码，iframe的内容被附加上这一script标签，标签中的内容就会得到执行。这种方式的缺点是接和数据都是由浏览器通过HTML标签来处理的，因此你没有办法知道连接何时在哪一端已被断开了，并且Iframe标签在浏览器中将被逐步取消使用。</p>
<p>JSONP Polling  JSONP轮询基本上与HTTP轮询一样，不同之处则是JSONP可以发出跨域请求，详细请搜索查询jsonp的内容。</p>
<h1 id="socket-io中emit和on的用法"><a href="#socket-io中emit和on的用法" class="headerlink" title="socket.io中emit和on的用法"></a>socket.io中emit和on的用法</h1><p>socket.emit(‘action’);表示发送了一个action命令，命令是字符串的，在另一端接收时，可以这么写： socket.on(‘action’,function(){…});<br>socket.emit(‘action’,data);表示发送了一个action命令，还有data数据，在另一端接收时，可以这么写： socket.on(‘action’,function(data){…});<br>socket.emit(action,arg1,arg2); 表示发送了一个action命令，还有两个数据，在另一端接收时，可以这么写： socket.on(‘action’,function(arg1,arg2){…});<br>在emit方法中包含回调函数，例如：<br>socket.emit(‘action’,data, function(arg1,arg2){…} );那么这里面有一个回调函数可以在另一端调用，另一端可以这么写：socket.on(‘action’,function(data,fn){   fn(‘a’,’b’) ;  });<br>上面的data数据可以有0个或者多个，相应的在另一端改变function中参数的个数即可，function中的参数个数和顺序应该和发送时一致<br>上面的fn表示另一个端传递过来的参数，是个函数，写fn(‘a’,’b’) ;会回调函数执行。一次发送不应该写多个回调，否则只有最后一个起效，回调应作为最后一个参数。</p>
<h1 id="socket-io系统api"><a href="#socket-io系统api" class="headerlink" title="socket.io系统api"></a>socket.io系统api</h1><ol>
<li>服务端</li>
</ol>
<p>io.on(‘connection’,function(socket));</p>
<p>监听客户端连接,回调函数会传递本次连接的socket</p>
<p>io.sockets.emit(‘String’,data);</p>
<p>给所有客户端广播消息</p>
<p>io.sockets.socket(socketid).emit(‘String’, data);</p>
<p>给指定的客户端发送消息</p>
<p>socket.on(‘String’,function(data));</p>
<p>监听客户端发送的信息</p>
<p>socket.emit(‘String’, data);</p>
<p>给该socket的客户端发送消息</p>
<ol>
<li>客户端</li>
</ol>
<p>建立一个socket连接</p>
<p>var socket = io(“<a href="http://localhost" target="_blank" rel="external">http://localhost</a>“); //监听本地任何端口的请求</p>
<p>客户端socket.on()监听的事件：</p>
<p>connect：连接成功<br>connecting：正在连接<br>disconnect：断开连接<br>connect_failed：连接失败<br>error：错误发生，并且无法被其他事件类型所处理<br>message：同服务器端message事件<br>anything：同服务器端anything事件<br>reconnect_failed：重连失败<br>reconnect：成功重连<br>reconnecting：正在重连<br>当第一次连接时，事件触发顺序为：connecting-&gt;connect；当失去连接时，事件触发顺序为：disconnect-&gt;reconnecting（可能进行多次）-&gt;connecting-&gt;reconnect-&gt;connect。</p>
<h1 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h1><p>安装node.js就不用说了吧，自动集成npm包。<br>然后再安装 socket.io和express 在文件目录下运行<br><code>node index</code> 就能看到效果</p>
<h1 id="客户端文件"><a href="#客户端文件" class="headerlink" title="客户端文件"></a>客户端文件</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div><div class="line">253</div><div class="line">254</div><div class="line">255</div><div class="line">256</div><div class="line">257</div><div class="line">258</div><div class="line">259</div><div class="line">260</div><div class="line">261</div><div class="line">262</div><div class="line">263</div><div class="line">264</div><div class="line">265</div><div class="line">266</div><div class="line">267</div><div class="line">268</div><div class="line">269</div><div class="line">270</div><div class="line">271</div><div class="line">272</div><div class="line">273</div><div class="line">274</div><div class="line">275</div><div class="line">276</div><div class="line">277</div><div class="line">278</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">&lt;!doctype html&gt;</div><div class="line">&lt;html&gt;</div><div class="line">  &lt;head&gt;</div><div class="line">    &lt;title&gt;Socket.IO chat&lt;/title&gt;</div><div class="line">    &lt;style&gt;</div><div class="line">        * &#123;</div><div class="line">            margin: 0;</div><div class="line">            padding: 0;</div><div class="line">        &#125;</div><div class="line">        .message &#123;</div><div class="line">            overflow: auto;</div><div class="line">            height: 550px;</div><div class="line">            display: block;</div><div class="line">            </div><div class="line">        &#125;</div><div class="line"></div><div class="line">       </div><div class="line">        .sys-section &#123;</div><div class="line">            text-align: center;</div><div class="line">            color: blue;</div><div class="line"></div><div class="line">        &#125;</div><div class="line">        .input-box &#123;</div><div class="line">            </div><div class="line">            position:fixed;</div><div class="line">            bottom: 0;</div><div class="line">            padding:8px 10px;</div><div class="line">            width:100%;</div><div class="line">            </div><div class="line">            background-color:#fff;</div><div class="line">            height: 50px;</div><div class="line">        &#125;</div><div class="line">        .input input &#123;</div><div class="line">            </div><div class="line">            margin:0;</div><div class="line">            float: left;</div><div class="line">            padding:0 6px;</div><div class="line">            height:28px;</div><div class="line">            width:90%;</div><div class="line">            font-size:14px;</div><div class="line">            background-color: #fbfbfb;</div><div class="line">            border:none;</div><div class="line">    </div><div class="line">            border-radius:15px;</div><div class="line">            color:#000;</div><div class="line">            box-shadow:0 0 1px #000;</div><div class="line">        &#125;</div><div class="line">        .action button &#123;</div><div class="line">            height: 28px;</div><div class="line">            width: 8%;</div><div class="line">            float: left;</div><div class="line">            border-radius: 10px;</div><div class="line">            </div><div class="line">            </div><div class="line">            font-size: 15px;</div><div class="line"></div><div class="line">        &#125;</div><div class="line"></div><div class="line">        .user &#123;</div><div class="line">            </div><div class="line">            color: red;</div><div class="line">            font-size: 20px;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        .user span &#123;</div><div class="line">            color: black;</div><div class="line">            </div><div class="line">        &#125;</div><div class="line"></div><div class="line">       </div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">      </div><div class="line">      </div><div class="line">    &lt;/style&gt;</div><div class="line">  &lt;/head&gt;</div><div class="line">  &lt;body&gt;</div><div class="line">    &lt;!--  登录界面 --&gt;</div><div class="line">    &lt;div id=&quot;loginbox&quot;&gt;</div><div class="line">            &lt;div style=&quot;width:260px;margin:200px auto;&quot;&gt;</div><div class="line">                请先输入你在聊天室的昵称</div><div class="line">                &lt;br/&gt;</div><div class="line">                &lt;br/&gt;</div><div class="line">                &lt;input type=&quot;text&quot; style=&quot;width:180px;&quot; placeholder=&quot;请输入用户名&quot; id=&quot;username&quot; name=&quot;username&quot; /&gt;</div><div class="line">                &lt;input type=&quot;button&quot; style=&quot;width:50px;&quot; value=&quot;提交&quot; onclick=&quot;CHAT.usernameSubmit()&quot; /&gt;  </div><div class="line">            &lt;/div&gt;</div><div class="line">        &lt;/div&gt;</div><div class="line">    &lt;!--  聊天界面 --&gt;</div><div class="line">        &lt;div id=&quot;chatbox&quot; style=&quot;display:none;&quot;&gt;</div><div class="line">            &lt;div style=&quot;background:#3d3d3d;height: 28px; width: 100%;font-size:12px;&quot;&gt;</div><div class="line">                &lt;div style=&quot;line-height: 28px;color:#fff;&quot;&gt;</div><div class="line">                    &lt;span style=&quot;text-align:left;margin-left:10px;&quot;&gt;socket.io多人聊天室&lt;/span&gt;</div><div class="line">                    &lt;span style=&quot;float:right; margin-right:10px;&quot;&gt;&lt;span id=&quot;showusername&quot;&gt;&lt;/span&gt; | </div><div class="line">                    &lt;a href=&quot;javascript:;&quot; onclick=&quot;CHAT.logout()&quot; style=&quot;color:#fff;&quot;&gt;退出&lt;/a&gt;&lt;/span&gt;</div><div class="line">                &lt;/div&gt;</div><div class="line">            &lt;/div&gt;</div><div class="line">            &lt;div id=&quot;doc&quot;&gt;</div><div class="line">                &lt;div id=&quot;onlinecount&quot; style=&quot;background:#EFEFF4; font-size:12px; margin-top:10px; margin-left:10px; color:#666;&quot;&gt;</div><div class="line">                &lt;/div&gt;</div><div class="line">                &lt;div id=&quot;chat&quot;&gt;</div><div class="line">                    &lt;div id=&quot;message&quot; class=&quot;message&quot;&gt;</div><div class="line"></div><div class="line">                    &lt;/div&gt;</div><div class="line">                    &lt;div class=&quot;input-box&quot;&gt;</div><div class="line">                        &lt;div class=&quot;input&quot;&gt;</div><div class="line">&lt;input type=&quot;text&quot; maxlength=&quot;140&quot; placeholder=&quot;请输入聊天内容，按Ctrl提交&quot; id=&quot;content&quot; name=&quot;content&quot;&gt;</div><div class="line">                        &lt;/div&gt;</div><div class="line">                        &lt;div class=&quot;action&quot;&gt;</div><div class="line">                            &lt;button type=&quot;button&quot; id=&quot;mjr_send&quot; onclick=&quot;CHAT.submit();&quot;&gt;提交&lt;/button&gt;</div><div class="line">                        &lt;/div&gt;</div><div class="line">                        </div><div class="line">                        </div><div class="line">                    &lt;/div&gt;</div><div class="line">                &lt;/div&gt;</div><div class="line">            &lt;/div&gt;</div><div class="line">        &lt;/div&gt;</div><div class="line">    &lt;script src=&quot;https://cdn.socket.io/socket.io-1.2.0.js&quot;&gt;&lt;/script&gt;</div><div class="line">   </div><div class="line">    &lt;script&gt;</div><div class="line">      </div><div class="line">     </div><div class="line"></div><div class="line">  (function () &#123;</div><div class="line">    var d = document;</div><div class="line">    var msgdiv = d.getElementById(&apos;message&apos;);</div><div class="line">    </div><div class="line">    //构造客户端对象 通过init函数实例化对象</div><div class="line">    window.CHAT = &#123;</div><div class="line">        msgObj:d.getElementById(&quot;message&quot;),</div><div class="line">        username:null,</div><div class="line">        userid:null,</div><div class="line">        socket:null,</div><div class="line">      </div><div class="line">        </div><div class="line">        scrollToBottom:function() &#123;</div><div class="line">            msgdiv.scrollTop = msgdiv.scrollHeight;</div><div class="line">        &#125;,</div><div class="line">        //退出，本例只是一个简单的刷新</div><div class="line">        logout:function()&#123;</div><div class="line">            //this.socket.disconnect();</div><div class="line">            location.reload();</div><div class="line">        &#125;,</div><div class="line">        //提交聊天消息内容</div><div class="line">        submit:function()&#123;</div><div class="line">            var content = d.getElementById(&quot;content&quot;).value;</div><div class="line">            if(content != &apos;&apos;)&#123;</div><div class="line">                var obj = &#123;</div><div class="line">                    userid: this.userid,</div><div class="line">                    username: this.username,</div><div class="line">                    content: content</div><div class="line">                &#125;;</div><div class="line">                this.socket.emit(&apos;message&apos;, obj);</div><div class="line">                d.getElementById(&quot;content&quot;).value = &apos;&apos;;</div><div class="line">            &#125;</div><div class="line">            return false;</div><div class="line">        &#125;,</div><div class="line">        genUid:function()&#123;</div><div class="line">            return new Date().getTime()+&quot;&quot;+Math.floor(Math.random()*899+100);</div><div class="line">        &#125;,</div><div class="line">        //更新系统消息，本例中在用户加入、退出的时候调用</div><div class="line">        updateSysMsg:function(o, action)&#123;</div><div class="line">            //当前在线用户列表</div><div class="line">            var onlineUsers = o.onlineUsers;</div><div class="line">            //当前在线人数</div><div class="line">            var onlineCount = o.onlineCount;</div><div class="line">            //新加入用户的信息</div><div class="line">            var user = o.user;</div><div class="line">                </div><div class="line">            //更新在线人数</div><div class="line">            var userhtml = &apos;&apos;;</div><div class="line">            var separator = &apos;&apos;;</div><div class="line">            for(key in onlineUsers) &#123;</div><div class="line">                if(onlineUsers.hasOwnProperty(key))&#123;</div><div class="line">                    userhtml += separator+onlineUsers[key];</div><div class="line">                    separator = &apos;、&apos;;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            d.getElementById(&quot;onlinecount&quot;).innerHTML = &apos;当前共有 &apos;+onlineCount+&apos; 人在线，在线列表：&apos;+userhtml;</div><div class="line">            </div><div class="line">            //添加系统消息</div><div class="line">            var html = &apos;&apos;;</div><div class="line">            html += &apos;&lt;div&gt;&apos;;</div><div class="line">            html += user.username;</div><div class="line">            html += (action == &apos;login&apos;) ? &apos; 加入了聊天室&apos; : &apos; 退出了聊天室&apos;;</div><div class="line">            html += &apos;&lt;/div&gt;&apos;;</div><div class="line">            var section = d.createElement(&apos;section&apos;);</div><div class="line">            section.className = &apos;sys-section&apos;;</div><div class="line">            section.innerHTML = html;</div><div class="line">            this.msgObj.appendChild(section);  </div><div class="line">            this.scrollToBottom(); </div><div class="line">            </div><div class="line">        &#125;,</div><div class="line">        //第一个界面用户提交用户名</div><div class="line">        usernameSubmit:function()&#123;</div><div class="line">            var username = d.getElementById(&quot;username&quot;).value;</div><div class="line">            if(username != &quot;&quot;)&#123;</div><div class="line">                d.getElementById(&quot;username&quot;).value = &apos;&apos;;</div><div class="line">                d.getElementById(&quot;loginbox&quot;).style.display = &apos;none&apos;;</div><div class="line">                d.getElementById(&quot;chatbox&quot;).style.display = &apos;block&apos;;</div><div class="line">                this.init(username);</div><div class="line">            &#125;</div><div class="line">            return false;</div><div class="line">        &#125;,</div><div class="line">        init:function(username)&#123;</div><div class="line">            /*</div><div class="line">            客户端根据时间和随机数生成uid,这样使得聊天室用户名称可以重复。</div><div class="line">            实际项目中，如果是需要用户登录，那么直接采用用户的uid来做标识就可以</div><div class="line">            */</div><div class="line">            this.userid = this.genUid();</div><div class="line">            this.username = username;</div><div class="line">            </div><div class="line">            d.getElementById(&quot;showusername&quot;).innerHTML = this.username;</div><div class="line">           </div><div class="line">            </div><div class="line">            </div><div class="line">            //连接websocket后端服务器</div><div class="line">            this.socket = io.connect(&apos;http://localhost&apos;);</div><div class="line"></div><div class="line">            </div><div class="line">            //告诉服务器端有用户登录</div><div class="line">            this.socket.emit(&apos;login&apos;, &#123;userid:this.userid, username:this.username&#125;);</div><div class="line">            </div><div class="line">            //监听新用户登录</div><div class="line">            this.socket.on(&apos;login&apos;, function(o)&#123;</div><div class="line">                CHAT.updateSysMsg(o, &apos;login&apos;);  </div><div class="line">            &#125;);</div><div class="line">            </div><div class="line">            //监听用户退出</div><div class="line">            this.socket.on(&apos;logout&apos;, function(o)&#123;</div><div class="line">                CHAT.updateSysMsg(o, &apos;logout&apos;);</div><div class="line">            &#125;);</div><div class="line">            </div><div class="line">            //监听消息发送</div><div class="line">            this.socket.on(&apos;message&apos;, function(obj)&#123;</div><div class="line">                </div><div class="line">                var contentDiv = &apos;&lt;div&gt;&apos; + &apos;&lt;span&gt;&apos; + obj.username + &apos;&lt;/span&gt;&apos; + &apos;&amp;nbsp&amp;nbsp&amp;nbsp 说: &amp;nbsp&amp;nbsp&amp;nbsp&apos; + obj.content +&apos;&lt;/div&gt;&apos;;</div><div class="line">                </div><div class="line">                </div><div class="line">                var section = d.createElement(&apos;section&apos;);</div><div class="line">                </div><div class="line">                    section.className = &apos;user&apos;;</div><div class="line">                    section.innerHTML = contentDiv ;</div><div class="line">            </div><div class="line">                   </div><div class="line">                </div><div class="line">                CHAT.msgObj.appendChild(section);</div><div class="line">                CHAT.scrollToBottom(); </div><div class="line">                 </div><div class="line">            &#125;);</div><div class="line"></div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line">    //通过“回车”提交用户名</div><div class="line">    d.getElementById(&quot;username&quot;).onkeydown = function(e) &#123;</div><div class="line">        e = e || event;</div><div class="line">        if (e.keyCode === 13) &#123;</div><div class="line">            CHAT.usernameSubmit();</div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line">    //通过“回车”提交信息</div><div class="line">    d.getElementById(&quot;content&quot;).onkeydown = function(e) &#123;</div><div class="line">        e = e || event;</div><div class="line">        if (e.keyCode === 13) &#123;</div><div class="line">            CHAT.submit();</div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line">&#125;)();</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">    &lt;/script&gt;</div><div class="line"></div><div class="line">  &lt;/body&gt;</div><div class="line">&lt;/html&gt;</div><div class="line"></div></pre></td></tr></table></figure>  
<p>客户端文件分为3个  一个页面html ，一个css文件 ，一个聊天脚本文件<br>基本思路就是构造一个客户对象  通过init函数实例化。通过socket来达到信息的交互。</p>
<h1 id="服务端文件"><a href="#服务端文件" class="headerlink" title="服务端文件"></a>服务端文件</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">var express=require(&apos;express&apos;);</div><div class="line">var app=express();</div><div class="line">var http=require(&apos;http&apos;).Server(app);</div><div class="line">var io=require(&apos;socket.io&apos;)(http);</div><div class="line"></div><div class="line">app.get(&apos;/&apos;,function(req,res)&#123;</div><div class="line">	res.sendFile(__dirname+&apos;/index.html&apos;);</div><div class="line">&#125;);</div><div class="line"></div><div class="line">//在线用户</div><div class="line">var onlineUsers = &#123;&#125;;</div><div class="line">//当前在线人数</div><div class="line">var onlineCount = 0;</div><div class="line"></div><div class="line">io.on(&apos;connection&apos;, function(socket)&#123;</div><div class="line">	console.log(&apos;a user connected&apos;);</div><div class="line">	</div><div class="line">	//监听新用户加入</div><div class="line">	socket.on(&apos;login&apos;, function(obj)&#123;</div><div class="line">		//将新加入用户的唯一标识当作socket的名称，后面退出的时候会用到</div><div class="line">		socket.name = obj.userid;</div><div class="line">		</div><div class="line">		//检查在线列表，如果不在里面就加入</div><div class="line">		if(!onlineUsers.hasOwnProperty(obj.userid)) &#123;</div><div class="line">			onlineUsers[obj.userid] = obj.username;</div><div class="line">			//在线人数+1</div><div class="line">			onlineCount++;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		//向所有客户端广播用户加入</div><div class="line">		io.emit(&apos;login&apos;, &#123;onlineUsers:onlineUsers, onlineCount:onlineCount, user:obj&#125;);</div><div class="line">		console.log(obj.username+&apos;加入了聊天室&apos;);</div><div class="line">	&#125;);</div><div class="line"></div><div class="line">	//监听用户退出</div><div class="line">	socket.on(&apos;disconnect&apos;, function()&#123;</div><div class="line">		//将退出的用户从在线列表中删除</div><div class="line">		if(onlineUsers.hasOwnProperty(socket.name)) &#123;</div><div class="line">			//退出用户的信息</div><div class="line">			var obj = &#123;userid:socket.name, username:onlineUsers[socket.name]&#125;;</div><div class="line">			</div><div class="line">			//删除</div><div class="line">			delete onlineUsers[socket.name];</div><div class="line">			//在线人数-1</div><div class="line">			onlineCount--;</div><div class="line">			</div><div class="line">			//向所有客户端广播用户退出</div><div class="line">			io.emit(&apos;logout&apos;, &#123;onlineUsers:onlineUsers, onlineCount:onlineCount, user:obj&#125;);</div><div class="line">			console.log(obj.username+&apos;退出了聊天室&apos;);</div><div class="line">		&#125;</div><div class="line">	&#125;);</div><div class="line">	</div><div class="line">	//监听用户发布聊天内容</div><div class="line">	socket.on(&apos;message&apos;, function(obj)&#123;</div><div class="line">		//向所有客户端广播发布的消息</div><div class="line">		io.emit(&apos;message&apos;, obj);</div><div class="line">		console.log(obj.username+&apos;说：&apos;+obj.content);</div><div class="line">	&#125;);</div><div class="line">  </div><div class="line">&#125;);</div><div class="line"></div><div class="line"></div><div class="line">http.listen(3000, function()&#123;</div><div class="line">	console.log(&apos;listening on *:3000&apos;);</div><div class="line">&#125;);</div><div class="line"></div><div class="line"></div></pre></td></tr></table></figure>
<p>服务端监听客户端的请求，同时向所有客户端发送消息</p>
<h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>至此，一个基于socket.io的聊天室便完成了。</p>
<p>这里分享一个拥有更强大功能的聊天室 <a href="http://www.cnblogs.com/Wayou/p/hichat_built_with_nodejs_socket.html" target="_blank" rel="external">更强大的聊天室</a></p>
<p>这篇文章写的很细，很适合新手学习。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[基于canvas的小游戏]]></title>
      <url>https://xu455255849.github.io/2016/07/25/%E5%9F%BA%E4%BA%8Ecanvas%E7%9A%84%E5%B0%8F%E6%B8%B8%E6%88%8F/</url>
      <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>今天在逛github之时，偶然发现一个html5做的小游戏 看了一下 略懂皮毛的我也能看的一知半解，便有了这篇文章<br>我克隆了作者的源码 研究了一下 看的也算懵懵懂懂。自己尝试着做了一遍并在作者的基础上加了点东西<br>原作者的<a href="https://github.com/lostdecade/simple_canvas_game" target="_blank" rel="external">github源码</a><br>下面放代码～</p>
<h1 id="html"><a href="#html" class="headerlink" title="html"></a>html</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html&gt;</div><div class="line">	&lt;head&gt;</div><div class="line">		&lt;meta charset=&quot;utf-8&quot; /&gt;</div><div class="line">		&lt;title&gt;simple canvas game&lt;/title&gt;</div><div class="line"></div><div class="line">	</div><div class="line">	&lt;/head&gt;</div><div class="line"></div><div class="line"></div><div class="line">	&lt;body&gt;</div><div class="line">		&lt;script type=&quot;text/javascript&quot; src=&quot;game.js&quot;&gt;&lt;/script&gt;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">	&lt;/body&gt;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">&lt;/html&gt;</div><div class="line"></div><div class="line"></div></pre></td></tr></table></figure>
<h1 id="js"><a href="#js" class="headerlink" title="js"></a>js</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">// 创建画布</div><div class="line">var canvas = document.createElement(&quot;canvas&quot;);</div><div class="line">var ctx = canvas.getContext(&quot;2d&quot;);</div><div class="line">canvas.width = 512;</div><div class="line">canvas.height = 480;</div><div class="line"></div><div class="line">document.body.appendChild(canvas);</div><div class="line"></div><div class="line">// 背景图片</div><div class="line">var bgReady = false;</div><div class="line">var bgImage = new Image();</div><div class="line">bgImage.onload = function () &#123;</div><div class="line">	bgReady = true;</div><div class="line">&#125;;</div><div class="line">bgImage.src = &quot;background.png&quot;;</div><div class="line"></div><div class="line">// 人物图片</div><div class="line">var heroReady = false;</div><div class="line">var heroImage = new Image();</div><div class="line">heroImage.onload = function () &#123;</div><div class="line">	heroReady = true;</div><div class="line">&#125;;</div><div class="line">heroImage.src = &quot;images/d1.gif&quot;;</div><div class="line"></div><div class="line">// 人物移动变换图像</div><div class="line">var pic1 = &quot;images/d1.gif&quot;;</div><div class="line">var pic2 = &quot;images/d2.gif&quot;;</div><div class="line">var pic3 = &quot;images/d3.gif&quot;;</div><div class="line">var pic4 = &quot;images/d4.gif&quot;;</div><div class="line">var pic5 = &quot;images/l1.gif&quot;;</div><div class="line">var pic6 = &quot;images/l2.gif&quot;;</div><div class="line">var pic7 = &quot;images/l3.gif&quot;;</div><div class="line">var pic8 = &quot;images/l4.gif&quot;;</div><div class="line">var pic9 = &quot;images/u1.gif&quot;;</div><div class="line">var pic10 = &quot;images/u2.gif&quot;;</div><div class="line">var pic11 = &quot;images/u3.gif&quot;;</div><div class="line">var pic12 = &quot;images/u4.gif&quot;;</div><div class="line">var pic13 = &quot;images/r1.gif&quot;;</div><div class="line">var pic14 = &quot;images/r2.gif&quot;;</div><div class="line">var pic15 = &quot;images/r3.gif&quot;;</div><div class="line">var pic16 = &quot;images/r4.gif&quot;;</div><div class="line"></div><div class="line">var picSub = 0;</div><div class="line">var picArrDown = [pic1,pic2,pic3,pic4];</div><div class="line">var picArrup = [pic9,pic10,pic11,pic12];</div><div class="line">var picArrLeft = [pic5,pic6,pic7,pic8];</div><div class="line">var picArrRight = [pic13,pic14,pic15,pic16];</div><div class="line"></div><div class="line"></div><div class="line">function changeImg (picArr) &#123;</div><div class="line">	if(picSub === picArr.length-1) &#123;</div><div class="line">		picSub = 0;</div><div class="line">	&#125;else &#123;</div><div class="line">		picSub += 1;</div><div class="line">	&#125;;</div><div class="line"></div><div class="line">	heroImage.src = picArr[picSub];</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">// 怪物图片</div><div class="line">var monsterReady = false;</div><div class="line">var monsterImage = new Image();</div><div class="line">monsterImage.onload = function () &#123;</div><div class="line">	monsterReady = true;</div><div class="line">&#125;;</div><div class="line">monsterImage.src = &quot;images/mon2.png&quot;;</div><div class="line"></div><div class="line">// 游戏对象</div><div class="line">var hero = &#123;</div><div class="line">	speed: 256 // 每秒移动的像素</div><div class="line">&#125;;</div><div class="line">var monster = &#123;&#125;;</div><div class="line">var monstersCaught = 0;</div><div class="line"></div><div class="line">// 按键控制</div><div class="line">var keysDown = &#123;&#125;;</div><div class="line"></div><div class="line">addEventListener(&quot;keydown&quot;, function (e) &#123;</div><div class="line">	keysDown[e.keyCode] = true;</div><div class="line">&#125;, false);</div><div class="line"></div><div class="line">addEventListener(&quot;keyup&quot;, function (e) &#123;</div><div class="line">	delete keysDown[e.keyCode];</div><div class="line">&#125;, false);</div><div class="line"></div><div class="line">// 重置游戏</div><div class="line">var reset = function () &#123;</div><div class="line">	hero.x = canvas.width / 2;</div><div class="line">	hero.y = canvas.height / 2;</div><div class="line">	</div><div class="line"></div><div class="line">	// Throw the monster somewhere on the screen randomly</div><div class="line">	monster.x = 32 + (Math.random() * (canvas.width - 64));</div><div class="line">	monster.y = 32 + (Math.random() * (canvas.height - 96));</div><div class="line">	</div><div class="line"></div><div class="line">&#125;;</div><div class="line"></div><div class="line">// 更新状态</div><div class="line">var update = function (modifier) &#123;</div><div class="line">	if (38 in keysDown) &#123; // 上行</div><div class="line">		hero.y -= hero.speed * modifier;</div><div class="line">		changeImg(picArrup);</div><div class="line">		if(hero.y &lt; 32) &#123;</div><div class="line">			hero.y = 32;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">	&#125;</div><div class="line">	if (40 in keysDown) &#123; //下行</div><div class="line">		hero.y += hero.speed * modifier;</div><div class="line">		changeImg(picArrDown);</div><div class="line">		if(hero.y &gt;=390) &#123;</div><div class="line">			hero.y = 390;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	if (37 in keysDown) &#123; // 左行</div><div class="line">		hero.x -= hero.speed * modifier;</div><div class="line">		changeImg(picArrLeft);</div><div class="line">		if(hero.x &lt;32) &#123;</div><div class="line">			hero.x =32;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	if (39 in keysDown) &#123; // 右行</div><div class="line">		hero.x += hero.speed * modifier;</div><div class="line">		changeImg(picArrRight);</div><div class="line">		if(hero.x &gt;448) &#123;</div><div class="line">			hero.x = 448;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	// 碰撞</div><div class="line">	if (</div><div class="line">		hero.x &lt;= (monster.x + 32)</div><div class="line">		&amp;&amp; monster.x &lt;= (hero.x + 32)</div><div class="line">		&amp;&amp; hero.y &lt;= (monster.y + 32)</div><div class="line">		&amp;&amp; monster.y &lt;= (hero.y + 32)</div><div class="line">	) &#123;</div><div class="line">		++monstersCaught;</div><div class="line">		reset();</div><div class="line">	&#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">// 绘制</div><div class="line">var render = function () &#123;</div><div class="line">	if (bgReady) &#123;</div><div class="line">		ctx.drawImage(bgImage,0,0 );</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	if (heroReady) &#123;</div><div class="line">		ctx.drawImage(heroImage, hero.x, hero.y);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	if (monsterReady) &#123;</div><div class="line">		ctx.drawImage(monsterImage, monster.x, monster.y,40,60);</div><div class="line">	&#125;</div><div class="line"></div><div class="line"></div><div class="line">	ctx.fillStyle = &quot;rgb(250, 250, 250)&quot;;</div><div class="line">	ctx.font = &quot;24px Helvetica&quot;;</div><div class="line">	ctx.textAlign = &quot;left&quot;;</div><div class="line">	ctx.textBaseline = &quot;top&quot;;</div><div class="line">	ctx.fillText(&quot;Goblins caught: &quot; + monstersCaught, 32, 32);</div><div class="line">&#125;;</div><div class="line"></div><div class="line">// 游戏主循环</div><div class="line">var main = function () &#123;</div><div class="line">	var now = Date.now();</div><div class="line">	var pass = now - then;</div><div class="line"></div><div class="line">	update(pass / 1000);</div><div class="line">	render();</div><div class="line"></div><div class="line">	then = now;</div><div class="line"></div><div class="line">	</div><div class="line">	requestAnimationFrame(main);</div><div class="line">&#125;;</div><div class="line"></div><div class="line">// 浏览器兼容</div><div class="line">var w = window;</div><div class="line">requestAnimationFrame = w.requestAnimationFrame || w.webkitRequestAnimationFrame || w.msRequestAnimationFrame || w.mozRequestAnimationFrame;</div><div class="line"></div><div class="line">var then = Date.now();</div><div class="line">reset();</div><div class="line">main();</div><div class="line"></div><div class="line"></div></pre></td></tr></table></figure>
<h1 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h1><p><a href="https://github.com/xu455255849/html5_canvasgame/blob/master/README.md" target="_blank" rel="external">git</a></p>
<h1 id="ps"><a href="#ps" class="headerlink" title="ps"></a>ps</h1><p>本来想做个基于cocos的游戏的，但是以现在的水平还是相当困难，只能先放放了。。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[jQuery图片轮播]]></title>
      <url>https://xu455255849.github.io/2016/07/23/jQuery%E5%9B%BE%E7%89%87%E8%BD%AE%E6%92%AD/</url>
      <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>初学jquery  在网上看到的一片文章 感觉不错 便学习了下。代码上我做了自己的修改  还加了许多学习的注释 代码更易读<br><a href="http://www.cnblogs.com/babyzone2004/archive/2010/08/30/1812682.html" target="_blank" rel="external">转载原文</a><br>本人的修改版源码 <a href="https://github.com/xu455255849/jquery-slider/blob/master/jq.js" target="_blank" rel="external">git</a></p>
<h1 id="html源码"><a href="#html源码" class="headerlink" title="html源码"></a>html源码</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html&gt;</div><div class="line">    &lt;head&gt;</div><div class="line">        &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html charset=utf-8&quot; /&gt;</div><div class="line">        &lt;title&gt;图片轮播切换&lt;/title&gt;</div><div class="line">        &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;style.css&quot;&gt;</div><div class="line">        &lt;script type=&quot;text/javascript&quot; src=&quot;jquery-1.12.3.js&quot;&gt;&lt;/script&gt;</div><div class="line">        &lt;script type=&quot;text/javascript&quot; src=&quot;jq.js&quot;&gt;&lt;/script&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line">    &lt;div id=&quot;banner&quot;&gt;</div><div class="line">        &lt;div id=&quot;banner_bg&quot;&gt;&lt;/div&gt;</div><div class="line">        &lt;div id=&quot;banner_info&quot;&gt; &lt;/div&gt; </div><div class="line">        &lt;ul&gt;</div><div class="line">            &lt;li class=&quot;on&quot;&gt;1&lt;/li&gt;</div><div class="line">            &lt;li&gt;2&lt;/li&gt;</div><div class="line">            &lt;li&gt;3&lt;/li&gt;</div><div class="line">            &lt;li&gt;4&lt;/li&gt;</div><div class="line">        &lt;/ul&gt;</div><div class="line">        &lt;div id=&quot;banner_list&quot;&gt;</div><div class="line">            &lt;a href=&quot;https://xu455255849.github.io/&quot; target=&quot;_blank&quot; &gt;</div><div class="line">                &lt;img src=&quot;./images/1.jpg&quot; title=&quot;111&quot; alt=&quot;z1111&quot; width=800 height=480&gt;</div><div class="line">            &lt;/a&gt;</div><div class="line">             &lt;a href=&quot;https://github.com/xu455255849/xu455255849.github.io&quot; target=&quot;_blank&quot; &gt;</div><div class="line">                &lt;img src=&quot;./images/2.jpg&quot; title=&quot;222&quot; alt=&quot;z2222111&quot; width=800 height=480&gt;</div><div class="line">            &lt;/a&gt;</div><div class="line">             &lt;a href=&quot;#&quot; target=&quot;_blank&quot; &gt;</div><div class="line">                &lt;img src=&quot;./images/3.jpg&quot; title=&quot;333&quot; alt=&quot;z333311&quot; width=800 height=480&gt;</div><div class="line">            &lt;/a&gt;</div><div class="line">             &lt;a href=&quot;#&quot; target=&quot;_blank&quot; &gt;</div><div class="line">                &lt;img src=&quot;./images/4.jpg&quot; title=&quot;444&quot; alt=&quot;zh44411&quot; width=800 height=480&gt;</div><div class="line">            &lt;/a&gt;</div><div class="line">        &lt;/div&gt;</div><div class="line">    &lt;/div&gt;</div><div class="line"></div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>
<h1 id="样式"><a href="#样式" class="headerlink" title="样式"></a>样式</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div></pre></td><td class="code"><pre><div class="line">#banner &#123;</div><div class="line">	position: relative;</div><div class="line">	width: 800px;</div><div class="line">	height: 480px;</div><div class="line">	border: 1px solid #666;</div><div class="line">	overflow: hidden;</div><div class="line">&#125;</div><div class="line"></div><div class="line">#banner_list img &#123;</div><div class="line">	border: 0px;</div><div class="line">&#125;</div><div class="line"></div><div class="line">#banner_bg &#123;</div><div class="line">	position: absolute;</div><div class="line">	bottom: 0;</div><div class="line">	background-color: #000;</div><div class="line">	height: 30px;</div><div class="line">	opacity: 0.3;</div><div class="line">	z-index: 999;</div><div class="line">	cursor: pointer;</div><div class="line">	width: 578px;</div><div class="line">&#125;</div><div class="line"></div><div class="line">#banner_info &#123;</div><div class="line">	position: absolute;</div><div class="line">	bottom: 0;</div><div class="line">	left: 5px;</div><div class="line">	height: 22px;</div><div class="line">	color: #fff;</div><div class="line">	z-index: 1000;</div><div class="line">	cursor: pointer;</div><div class="line">&#125;</div><div class="line"></div><div class="line">#banner ul &#123;</div><div class="line">	position: absolute;</div><div class="line">	list-style: none;</div><div class="line">	opacity: 0.8;</div><div class="line">	border: 1px solid #fff;</div><div class="line">	z-index: 1002;</div><div class="line">	margin: 0;</div><div class="line">	padding: 0;</div><div class="line">	bottom: 3px;</div><div class="line">	right: 5px;</div><div class="line">&#125;</div><div class="line"></div><div class="line">#banner ul li &#123;</div><div class="line">	padding: 0px 8px;</div><div class="line">	float: left;</div><div class="line">	display: list-item;</div><div class="line">	color: #fff;</div><div class="line">	border: #e5eaff 1px solid;</div><div class="line">	background-color: black;</div><div class="line">	cursor: pointer;</div><div class="line">	</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">#banner ul li.on &#123;</div><div class="line">	background-color: red;</div><div class="line">	</div><div class="line"></div><div class="line">	color: pink; </div><div class="line">&#125;</div><div class="line"></div><div class="line">#banner_list a &#123;</div><div class="line">	position: absolute;  /* 让图片重叠在一起 */</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"></div></pre></td></tr></table></figure>
<h1 id="js代码"><a href="#js代码" class="headerlink" title="js代码"></a>js代码</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"> var t = 0; </div><div class="line"> var n = 0;</div><div class="line"> var count</div><div class="line"> $(document).ready(function()&#123;   </div><div class="line">     count=$(&quot;#banner_list a&quot;).length;</div><div class="line">     // count赋值为a长度 为4</div><div class="line">     $(&quot;#banner_list a:not(:first-child)&quot;).hide();</div><div class="line">     // 隐藏后面所有的a图片</div><div class="line">     $(&quot;#banner_info&quot;).html($(&quot;#banner_list a:first-child&quot;).find(&quot;img&quot;).attr(&apos;alt&apos;));</div><div class="line">     // 找到id为banner_info的html标签 设置为 a img 的alt属性值</div><div class="line"></div><div class="line">     $(&quot;#banner_info&quot;).click(function()&#123;window.open($(&quot;#banner_list a:first-child&quot;).attr(&apos;href&apos;), &quot;_blank&quot;)&#125;);</div><div class="line">     //点击info栏 在新窗口打开href为list 的属性 的页面</div><div class="line">     $(&quot;#banner li&quot;).click(function() &#123;  // 以上为初始化函数 这里开始为循环体函数</div><div class="line">         var i = $(this).text() - 1;//获取Li元素内的值，即1，2，3，4</div><div class="line">         n = i;</div><div class="line">       </div><div class="line">         $(&quot;#banner_info&quot;).html($(&quot;#banner_list a&quot;).eq(i).find(&quot;img&quot;).attr(&apos;alt&apos;));</div><div class="line">         //根据下标修改info</div><div class="line">         $(&quot;#banner_info&quot;).unbind().click(function()&#123;window.open($(&quot;#banner_list a&quot;).eq(i).attr(&apos;href&apos;), &quot;_blank&quot;)&#125;)</div><div class="line">         //移除原有的点击事件 修改为新事件｛地址改为图片href｝</div><div class="line">         $(&quot;#banner_list a&quot;).filter(&quot;:visible&quot;).fadeOut(500).parent().children().eq(i).fadeIn(1000);</div><div class="line">         // 返回显示的图片 消失 返回 小标为i的a 链接图片 显示</div><div class="line">         document.getElementById(&quot;banner&quot;).style.background=&quot;&quot;;</div><div class="line">         $(this).toggleClass(&quot;on&quot;); </div><div class="line">         $(this).siblings().removeAttr(&quot;class&quot;);</div><div class="line">     &#125;);</div><div class="line">     t = setInterval(&quot;showAuto()&quot;, 2000);</div><div class="line">     $(&quot;#banner&quot;).hover(function()&#123;clearInterval(t)&#125;, function()&#123;t = setInterval(&quot;showAuto()&quot;, 2000);&#125;);</div><div class="line"> &#125;)</div><div class="line"> </div><div class="line">function showAuto()   // 定义循环函数 n自增</div><div class="line"> &#123;</div><div class="line">     n = n &gt;=(count - 1) ? 0 : ++n;  </div><div class="line">     $(&quot;#banner li&quot;).eq(n).trigger(&apos;click&apos;);  //触发事件 开始执行内循环</div><div class="line"> &#125;</div></pre></td></tr></table></figure>
<h1 id="我修改的版本"><a href="#我修改的版本" class="headerlink" title="我修改的版本"></a>我修改的版本</h1><p>现在大多都是带banner 和 前进后退的slider 还发现作者的原版点击索引数字的时候 如果点击2下 就会有bug<br>会出现一个 class on都没有的现象<br>我在这2个方面作出了点改进。</p>
<h1 id="修改点击bug"><a href="#修改点击bug" class="headerlink" title="修改点击bug"></a>修改点击bug</h1><p><code>$(&#39;#banner ul li&#39;).removeClass(&#39;on&#39;);
  $(&#39;#banner ul li&#39;).eq(n).addClass(&#39;on&#39;);</code></p>
<p>  原理很简单 点击的时候先移除所有的on样式，再把对应的图片 添加on样式</p>
<h1 id="添加前进后退按钮"><a href="#添加前进后退按钮" class="headerlink" title="添加前进后退按钮"></a>添加前进后退按钮</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">//html部分</div><div class="line"></div><div class="line">        &lt;div class=&quot;slider-page&quot;&gt;</div><div class="line">                    &lt;span class=&quot;slider-next&quot;&gt;&lt;/span&gt;</div><div class="line">                    &lt;span class=&quot;slider-prev&quot;&gt;&lt;/span&gt;</div><div class="line">        &lt;/div&gt;</div><div class="line">    &lt;/div&gt;</div><div class="line"></div><div class="line">  //js文件  添加前后翻页按钮</div><div class="line">        $(&apos;.slider-page&apos;).hide();</div><div class="line"></div><div class="line">        $(&apos;#banner&apos;).hover(function() &#123;</div><div class="line">            $(&apos;.slider-page&apos;).show();</div><div class="line">        &#125;,function()&#123;</div><div class="line">            $(&apos;.slider-page&apos;).hide();</div><div class="line">        &#125;);</div><div class="line"></div><div class="line">         </div><div class="line">        $(&apos;.slider-prev&apos;).bind(&apos;click&apos;, function() &#123;</div><div class="line">            prev();</div><div class="line">        &#125;);</div><div class="line"></div><div class="line">        $(&apos;.slider-next&apos;).bind(&apos;click&apos;, function() &#123;</div><div class="line">            next();</div><div class="line">        &#125;)</div><div class="line">        </div></pre></td></tr></table></figure>
<p>初始化页面的时候添加按钮 为隐藏  鼠标悬浮后显示并绑定点击事件</p>
<pre><code>{% codeblock %}
function prev() {
            if(n > 0) {
                n = n-1;
            } else {
                n = count-1;
            }

            $("#banner_info").html($("#banner_list a").eq(n).find("img").attr('title'));
            //根据下标修改info
            $("#banner_info").unbind().click(function(){window.open($("#banner_list a").eq(n).attr('href'), "_blank")})
            //移除原有的点击事件 修改为新事件｛地址改为图片href｝
            $("#banner_list a").filter(":visible").fadeOut(500).parent().children().eq(n).fadeIn(1000);
            // 返回显示的图片 消失 返回 下标为i的a 链接图片 显示
            $('#banner ul li').removeClass('on');
            $('#banner ul li').eq(n).addClass('on');
            
            

        };

         function next() {
            if(n < count-1) {
                n = n+1;
            } else {
                n = 0;
            }
            

            $("#banner_info").html($("#banner_list a").eq(n).find("img").attr('title'));
            //根据下标修改info
            $("#banner_info").unbind().click(function(){window.open($("#banner_list a").eq(n).attr('href'), "_blank")})
            //移除原有的点击事件 修改为新事件｛地址改为图片href｝
            $("#banner_list a").filter(":visible").fadeOut(500).parent().children().eq(n).fadeIn(1000);
            // 返回显示的图片 消失 返回 下标为i的a 链接图片 显示
            $('#banner ul li').removeClass('on');
            $('#banner ul li').eq(n).addClass('on');
            //点击切换图片
            
            

        };
        {% endcodeblock %}


    定义事件函数 点击触发事件
    建议把js函数放到尾部 与jq 分开 以提高代码的可读性
</code></pre><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p> 不知为啥。看到jq我就想做图片轮播 可能是因为以前不懂代码的时候对图片轮播觉得非常高大上吧。。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[AIRbnp－用更合理的方式书写js]]></title>
      <url>https://xu455255849.github.io/2016/07/17/AIRbnp%EF%BC%8D%E7%94%A8%E6%9B%B4%E5%90%88%E7%90%86%E7%9A%84%E6%96%B9%E5%BC%8F%E4%B9%A6%E5%86%99js/</url>
      <content type="html"><![CDATA[<blockquote class="blockquote-center"><p>如何更合理的书写js </p>
</blockquote>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>今天在github上发现的一篇关于代码规范，我觉得关于怎么写代码这一点是比较重要的<br>.我个人认为基础是重要的，我便着重记录了下基础的语法。想要看全部内容的人可以点击下面的<br>github链接 。<br><a href="https://github.com/sivan/javascript-style-guide/blob/master/es5/README.md" target="_blank" rel="external">github</a></p>
<h1 id="类型"><a href="#类型" class="headerlink" title="类型"></a>类型</h1><h2 id="原始值：存取直接作用于它自身。"><a href="#原始值：存取直接作用于它自身。" class="headerlink" title="原始值：存取直接作用于它自身。"></a>原始值：存取直接作用于它自身。</h2><ul>
<li>string</li>
<li>number</li>
<li>boolean</li>
<li>null</li>
<li>underfined<br>`var foo = 1;<br>var bar = foo;</li>
</ul>
<p>bar = 9;</p>
<p>console.log(foo, bar); // =&gt; 1, 9`</p>
<h2 id="复杂类型：-存取时作用于它自身值的引用。"><a href="#复杂类型：-存取时作用于它自身值的引用。" class="headerlink" title="复杂类型：: 存取时作用于它自身值的引用。"></a>复杂类型：: 存取时作用于它自身值的引用。</h2><ul>
<li>object</li>
<li>array</li>
<li>function</li>
</ul>
<p>`var foo = [1, 2];<br>var bar = foo;</p>
<p>bar[0] = 9;</p>
<p>console.log(foo[0], bar[0]); // =&gt; 9, 9`</p>
<p>我的理解是基本类型是传值，而复杂类型传递的是内存地址。</p>
<h1 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h1><p>使用直接量创建对象</p>
<p>`// bad<br>var item = new Object();</p>
<p>// good<br>var item = {};`</p>
<p>不要使用保留字作为键名<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">// bad</div><div class="line">var superman = &#123;</div><div class="line">  default: &#123; clark: &apos;kent&apos; &#125;,</div><div class="line">  private: true</div><div class="line">&#125;;</div><div class="line"></div><div class="line">// good</div><div class="line">var superman = &#123;</div><div class="line">  defaults: &#123; clark: &apos;kent&apos; &#125;,</div><div class="line">  hidden: true</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p>使用同义词替换保留字</p>
<p>`// bad<br>var superman = {<br>  class: ‘alien’<br>};</p>
<p>// bad<br>var superman = {<br>  klass: ‘alien’<br>};</p>
<p>// good<br>var superman = {<br>  type: ‘alien’<br>};`</p>
<h1 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h1><p>使用直接量创建数组</p>
<p>`// bad<br>var items = new Array();</p>
<p>// good<br>var items = [];`</p>
<p>向数组增加元素时使用 Array#push 来替代直接赋值。</p>
<p>`var someStack = [];</p>
<p>// bad<br>someStack[someStack.length] = ‘abracadabra’;</p>
<p>// good<br>someStack.push(‘abracadabra’);`</p>
<p>当你需要拷贝数组时，使用 Array#slice</p>
<p>`var len = items.length;<br>var itemsCopy = [];<br>var i;</p>
<p>// bad<br>for (i = 0; i &lt; len; i++) {<br>  itemsCopy[i] = items[i];<br>}</p>
<p>// good<br>itemsCopy = items.slice();`</p>
<p>使用 Array#slice 将类数组对象转换成数组。</p>
<p><code>function trigger() {
  var args = Array.prototype.slice.call(arguments);
  ...
}</code></p>
<h1 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h1><p>使用单引号 ‘’ 包裹字符串。</p>
<p>`// bad<br>var name = “Bob Parr”;</p>
<p>// good<br>var name = ‘Bob Parr’;</p>
<p>// bad<br>var fullName = “Bob “ + this.lastName;</p>
<p>// good<br>var fullName = ‘Bob ‘ + this.lastName;`</p>
<p>超过 100 个字符的字符串应该使用连接符写成多行。</p>
<p>注：若过度使用，通过连接符连接的长字符串可能会影响性能</p>
<p>`// bad<br>var errorMessage = ‘This is a super long error that was thrown because of Batman. When you stop to think about how Batman had anything to do with this, you would get nowhere fast.’;</p>
<p>// bad<br>var errorMessage = ‘This is a super long error that was thrown because \<br>of Batman. When you stop to think about how Batman had anything to do \<br>with this, you would get nowhere \<br>fast.’;</p>
<p>// good<br>var errorMessage = ‘This is a super long error that was thrown because ‘ +<br>  ‘of Batman. When you stop to think about how Batman had anything to do ‘ +<br>  ‘with this, you would get nowhere fast.’;`</p>
<p>程序化生成的字符串使用 Array#join 连接而不是使用连接符</p>
<p>`var items;<br>var messages;<br>var length;<br>var i;</p>
<p>messages = [{<br>  state: ‘success’,<br>  message: ‘This one worked.’<br>}, {<br>  state: ‘success’,<br>  message: ‘This one worked as well.’<br>}, {<br>  state: ‘error’,<br>  message: ‘This one did not work.’<br>}];</p>
<p>length = messages.length;</p>
<p>// bad<br>function inbox(messages) {<br>  items = ‘<ul>‘;</ul></p>
<p>  for (i = 0; i &lt; length; i++) {<br>    items += ‘<li>‘ + messages[i].message + ‘</li>‘;<br>  }</p>
<p>  return items + ‘‘;<br>}</p>
<p>// good<br>function inbox(messages) {<br>  items = [];</p>
<p>  for (i = 0; i &lt; length; i++) {<br>    // use direct assignment in this case because we’re micro-optimizing.<br>    items[i] = ‘<li>‘ + messages[i].message + ‘</li>‘;<br>  }</p>
<p>  return ‘<ul>‘ + items.join(‘’) + ‘</ul>‘;<br>}`</p>
<h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><p>函数表达式：</p>
<p>`// 匿名函数表达式<br>var anonymous = function() {<br>  return true;<br>};</p>
<p>// 命名函数表达式<br>var named = function named() {<br>  return true;<br>};</p>
<p>// 立即调用的函数表达式（IIFE）<br>(function () {<br>  console.log(‘Welcome to the Internet. Please follow me.’);<br>}());`</p>
<p>永远不要在一个非函数代码块（if、while 等）中声明一个函数，把那个函数赋给一个变量。浏览器允许你这么做，但它们的解析表现不一致。</p>
<p>注： ECMA-262 把 块 定义为一组语句。函数声明不是语句。阅读对 ECMA-262 这个问题的说明。</p>
<p>`// bad<br>if (currentUser) {<br>  function test() {<br>    console.log(‘Nope.’);<br>  }<br>}</p>
<p>// good<br>var test;<br>if (currentUser) {<br>  test = function test() {<br>    console.log(‘Yup.’);<br>  };<br>}`</p>
<p>永远不要把参数命名为 arguments。这将取代函数作用域内的 arguments 对象</p>
<p>`// bad<br>function nope(name, options, arguments) {<br>  // …stuff…<br>}</p>
<p>// good<br>function yup(name, options, args) {<br>  // …stuff…<br>}`</p>
<h1 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h1><p>使用 . 来访问对象的属性</p>
<p>`var luke = {<br>  jedi: true,<br>  age: 28<br>};</p>
<p>// bad<br>var isJedi = luke[‘jedi’];</p>
<p>// good<br>var isJedi = luke.jedi;`</p>
<p>当通过变量访问属性时使用中括号 []。</p>
<p>`var luke = {<br>  jedi: true,<br>  age: 28<br>};</p>
<p>function getProp(prop) {<br>  return luke[prop];<br>}</p>
<p>var isJedi = getProp(‘jedi’);`</p>
<h1 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h1><p>总是使用 var 来声明变量。不这么做将导致产生全局变量。我们要避免污染全局命名空间。</p>
<p>`// bad<br>superPower = new SuperPower();</p>
<p>// good<br>var superPower = new SuperPower();`</p>
<p>使用 var 声明每一个变量。 这样做的好处是增加新变量将变的更加容易，而且你永远不用再担心调换错 ; 跟 ,。</p>
<p>`// bad<br>var items = getItems(),<br>    goSportsTeam = true,<br>    dragonball = ‘z’;</p>
<p>// bad<br>// （跟上面的代码比较一下，看看哪里错了）<br>var items = getItems(),<br>    goSportsTeam = true;<br>    dragonball = ‘z’;</p>
<p>// good<br>var items = getItems();<br>var goSportsTeam = true;<br>var dragonball = ‘z’;`</p>
<p>最后再声明未赋值的变量。当你需要引用前面的变量赋值时这将变的很有用。</p>
<p>`// bad<br>var i, len, dragonball,<br>    items = getItems(),<br>    goSportsTeam = true;</p>
<p>// bad<br>var i;<br>var items = getItems();<br>var dragonball;<br>var goSportsTeam = true;<br>var len;</p>
<p>// good<br>var items = getItems();<br>var goSportsTeam = true;<br>var dragonball;<br>var length;<br>var i;`</p>
<p>在作用域顶部声明变量。这将帮你避免变量声明提升相关的问题。</p>
<p>`// bad<br>function () {<br>  test();<br>  console.log(‘doing stuff..’);</p>
<p>  //..other stuff..</p>
<p>  var name = getName();</p>
<p>  if (name === ‘test’) {<br>    return false;<br>  }</p>
<p>  return name;<br>}</p>
<p>// good<br>function () {<br>  var name = getName();</p>
<p>  test();<br>  console.log(‘doing stuff..’);</p>
<p>  //..other stuff..</p>
<p>  if (name === ‘test’) {<br>    return false;<br>  }</p>
<p>  return name;<br>}</p>
<p>// bad - 不必要的函数调用<br>function () {<br>  var name = getName();</p>
<p>  if (!arguments.length) {<br>    return false;<br>  }</p>
<p>  this.setFirstName(name);</p>
<p>  return true;<br>}</p>
<p>// good<br>function () {<br>  var name;</p>
<p>  if (!arguments.length) {<br>    return false;<br>  }</p>
<p>  name = getName();<br>  this.setFirstName(name);</p>
<p>  return true;<br>}`</p>
<h1 id="分号"><a href="#分号" class="headerlink" title="分号"></a>分号</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">// bad</div><div class="line">(function () &#123;</div><div class="line">  var name = &apos;Skywalker&apos;</div><div class="line">  return name</div><div class="line">&#125;)()</div><div class="line"></div><div class="line">// good</div><div class="line">(function () &#123;</div><div class="line">  var name = &apos;Skywalker&apos;;</div><div class="line">  return name;</div><div class="line">&#125;)();</div><div class="line"></div><div class="line">// good (防止函数在两个 IIFE 合并时被当成一个参数</div><div class="line">;(function () &#123;</div><div class="line">  var name = &apos;Skywalker&apos;;</div><div class="line">  return name;</div><div class="line">&#125;)();</div></pre></td></tr></table></figure>
<blockquote>
<p>添加分号是比较重要的，这关乎到你的代码压缩和性能，没有正确使用分号浏览器会自动<br>添加，这会损失一部分性能，并且压缩的效果会大打折扣。［会把中间的空格视为代码块］</p>
</blockquote>
<p>这里还有2篇规范 一起记录下来 以备用。［目前水平太渣］</p>
<p><a href="https://github.com/JasonBoy/javascript/tree/master/react" target="_blank" rel="external">jsx代码规范-react</a><br><a href="https://github.com/Zhangjd/css-style-guide" target="_blank" rel="external">Airbnb CSS / Sass 指南</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[寻找时间成为一名优秀的程序员]]></title>
      <url>https://xu455255849.github.io/2016/07/16/%E5%AF%BB%E6%89%BE%E6%97%B6%E9%97%B4%E6%88%90%E4%B8%BA%E4%B8%80%E5%90%8D%E4%BC%98%E7%A7%80%E7%9A%84%E7%A8%8B%E5%BA%8F%E5%91%98/</url>
      <content type="html"><![CDATA[<h1 id="寻找时间成为一名更优秀的程序员"><a href="#寻找时间成为一名更优秀的程序员" class="headerlink" title="寻找时间成为一名更优秀的程序员"></a>寻找时间成为一名更优秀的程序员</h1><blockquote>
<p>本文转载自：<a href="http://www.zcfy.cc" target="_blank" rel="external">众成翻译</a><br>译者：<a href="http://www.zcfy.cc/@loveky" target="_blank" rel="external">loveky</a><br>链接：<a href="http://www.zcfy.cc/article/769" target="_blank" rel="external">http://www.zcfy.cc/article/769</a><br>原文：<a href="https://medium.freecodecamp.com/finding-time-to-become-a-better-developer-eebc154881b2#.t1uuonhtf" target="_blank" rel="external">https://medium.freecodecamp.com/finding-time-to-become-a-better-developer-eebc154881b2#.t1uuonhtf</a></p>
</blockquote>
<p><img src="https://d262ilb51hltx0.cloudfront.net/max/800/1*Y0koaXjHnJSrzB6vK4STqQ.png" alt=""></p>
<p>没有时间做任何事。这就是你感受，不是吗？没有时间学习你觉得你需要学会以跟上潮流的知识。没有时间回过头去重构那些丑陋的代码。它至少能工作，何况截止日期马上就要到了。没有时间编写单元测试。没有时间为今后要维护你代码的伙计编写文档或注释。没有时间思考。没有时间呼吸。没时间！</p>
<p>好吧…如果你能花时间阅读本文，我保证你自己会为那些重要的事找到更多时间。</p>
<p>我曾经以为成为一名伟大程序员的唯一途径就拼命工作。我的健康，友谊，家庭都因此受到影响。理解以下5个关于时间管理的真相拯救了我。</p>
<h3 id="1-你不需要为了赶潮流而学习每一个新事物"><a href="#1-你不需要为了赶潮流而学习每一个新事物" class="headerlink" title="1. 你不需要为了赶潮流而学习每一个新事物"></a>1. 你不需要为了赶潮流而学习每一个新事物</h3><figure name="4449" id="4449"><br><br><img src="https://d262ilb51hltx0.cloudfront.net/max/800/1*nlHiraEMnpECFoi3_nIV4g.gif" alt=""><br><br><figcaption>你不需要</figcaption><br><br></figure>

<p>毫无疑问一个优秀的程序员应该保持不断的学习，但是你把学习的焦点放在哪儿能在很大程度上影响你需要花费的时间。</p>
<blockquote>
<p>“老的事物已经死去，(终归老去的)新事物万岁！”</p>
</blockquote>
<p>首先，不要被出现在那些每37秒就宣布一个新标准的博客上的头条所愚弄。这些新技术，新框架，新特性中的大多数永远都不会被认可与采纳，因此你根本不需要了解它们。那些真正能够脱颖而出的也会经历比博客圈和发明厂商宣传的长的多的时间才会被采用。公司投资于他们的技术栈 —— 和那些小创业公司不一样，他们不可能说变就变。所以，放松一下，你的职业生涯很安全。</p>
<p>把你的学习聚焦在三方面，以下面列出的顺序为优先级：</p>
<ol>
<li><strong>基础</strong> —— 当你有了非常扎实的基础知识之后，学习新技能会变得非常容易。举个例子，如果你对JavaScript有着深入的了解，你就可以飞速的掌握任何新的JavaScript框架。如果你深入学习了面向对象编程，你也能快速掌握任何新的面向对象语言。深入学习基础知识会极大的提高你的学习效率。始终把提高对基础知识的掌握放在第一位。</li>
<li><strong>你最常使用的技术栈的最新版本/特性</strong> —— 存在一套你每天都会使用的技术栈。这些是可以帮你养活你及你家人的工具。当这些工具的新版本发布时，投入时间学习是很值得的。</li>
<li><strong>由市场领导者主导的流行技术</strong> —— 如果一个颇具规模的公司，比如Google，Facebook或是Microsoft提出某项新技术并已经开始小有名气，这也值得你的关注。市面上曾经有许多JavaScript框架争夺人们的注意力，然后Angular和React出现了并将那些框架彻底消灭。我不是说今后不会有搅局者出现成为下一个焦点，但实际情况往往是杂牌技术只不过是一些噪音。</li>
</ol>
<p>学习时间应该是你日程安排的一部分。每天抽出一点时间来学习。这不需要很长的时间，即使是每天花25分钟阅读和练习也可以快速积累。</p>
<h3 id="2-编写优秀的代码比编写糟糕的代码需要更少的时间，但感觉上并不是这样"><a href="#2-编写优秀的代码比编写糟糕的代码需要更少的时间，但感觉上并不是这样" class="headerlink" title="2. 编写优秀的代码比编写糟糕的代码需要更少的时间，但感觉上并不是这样"></a>2. 编写优秀的代码比编写糟糕的代码需要更少的时间，但感觉上并不是这样</h3><figure name="b2cc" id="b2cc"><br><br><img src="https://d262ilb51hltx0.cloudfront.net/max/800/1*T_iEqRX_YzZjmQeaRgk2mA.gif" alt=""><br><br><figcaption>时间是一个扁圆</figcaption><br><br></figure>

<p>你很可能喜欢开发完几个新功能后当你试着运行并且发现似乎可以正常工作时那一刻的感受。但那只是你时间投入的开始。在一个功能上投入的时间包括了后期调试的时间，重构花费的时间以及解决由于开发时的不良设计导致的其它问题的时间。当你开始以这种方式认识你的时间投入时，你会发现，从长远来看，更少的错误和更好的设计是值得投资的。</p>
<p>你可以做两件事来减少代码中的错误并实现更好的设计。</p>
<ol>
<li><strong>使用测试驱动开发</strong> 首先编写测试，然后编写代码以使测试通过。这不仅会减少bug还会导致更好的设计，因为当你按照可测试的方式组织代码时，你最终会得到更小，更简单的，依赖更少的函数。</li>
<li><strong>使用迭代的设计方式</strong> 在你的代码能真正工作之前，不要花时间试图让你的代码变完美。你永远不可能在脑子里把它设计的完全正确。你必须敲击键盘来生成实现预期功能的代码。问题是程序员尝尝犯两个常见的错误：要么时花了太多时间思考而没有足够的时间动手，要么就是不去优化他们最初的方案。遵循最初由Kent Beck提出的口头禅：“make it work, make it right, make it fast” —— 按照话中的顺序。</li>
</ol>
<h3 id="3-7x24的工作不会让你成为英雄，管理预期才会"><a href="#3-7x24的工作不会让你成为英雄，管理预期才会" class="headerlink" title="3. 7x24的工作不会让你成为英雄，管理预期才会"></a>3. 7x24的工作不会让你成为英雄，管理预期才会</h3><figure name="a063" id="a063"><br><br><img src="https://d262ilb51hltx0.cloudfront.net/max/800/1*NyLgzD71S8ZmsZ1QWRTYtw.gif" alt=""><br><br><figcaption>下班到家，开始工作!</figcaption><br><br></figure>

<p>这一条几乎杀了我。我曾经同意并承诺过我老板或客户提出的任何疯狂的时间表。我害怕说“不”。我害怕让任何人失望。为了交付我可以做任何事。我曾经睡在办公桌下，有过多次长达40+小时的马拉松式的编程经历。</p>
<p>起初我是一颗耀眼的明星。别人对我大加赞赏，我感觉自己像是个英雄。但是我设置了一个不可能实现的预期。不可能长久的像那样工作。最终我开始疲惫不堪，生病并错过截止日期。我开始得到不可靠的名声。这是个坏消息。</p>
<p>最后我终于明白真正的英雄是那些持续可靠的人。他们说到做到。要成为那样的英雄的唯一途径就是管理预期。</p>
<p>你需要控制时间表以便总是可以按时交付高质量的工作。起初这会非常困难。这意味着必须说“不”并把需求打回。</p>
<p>在最开始，你的老板和客户不会被你的拒绝刺激到。但一旦你证明自己是值得信赖的，一切都将开始改变。</p>
<p>随着时间的推移，其它程序员会迟到，交付马虎的工作或是筋疲力竭变得不可靠。这时你就会成为团队中真正的英雄。事实上，学会这一点让我成为我的领域里最受欢迎的咨询顾问。由于狠抓预期管理，我在质量和时效性方面建立了良好的声誉。</p>
<h3 id="4-不是所有花在“改善”代码上的时间都会得到相同的回报"><a href="#4-不是所有花在“改善”代码上的时间都会得到相同的回报" class="headerlink" title="4. 不是所有花在“改善”代码上的时间都会得到相同的回报"></a>4. 不是所有花在“改善”代码上的时间都会得到相同的回报</h3><figure name="e7c5" id="e7c5"><br><br><img src="https://d262ilb51hltx0.cloudfront.net/max/800/1*JMk2wpkTz9SKzs1D9s7-CA.png" alt=""><br><br></figure>

<p>花费时间是一种投资。和所有投资一样，投资回报率是一个合理的期望。你的所得至少应该和投入一样多，希望是越多越好。</p>
<p>我们已经谈论过“make it work, make it right, make it fast”。这个是不错的口头禅但这里有一个陷阱：“right”并不意味着完美，“fast”也不是说越快越好。</p>
<p>“Right”的含义是代码可以正常工作并且容易重构。“Fast”意味着执行速度对整体的用户体验没有负面影响。最重要的是你的程序让用户<strong>感觉起来</strong>很快。</p>
<p>所以，不要花时间尝试降低一个几乎不被使用的函数的执行时间，或是试图把一个比人眨眼（大约300ms）还快的函数的速度再提升几毫秒。也不要仅仅是因为学了一点新技术/方法就说服自己回过头去浪费时间重构那些组织良好，正常工作的代码。</p>
<h3 id="5-安排好休息时间可以让你更高效的工作"><a href="#5-安排好休息时间可以让你更高效的工作" class="headerlink" title="5. 安排好休息时间可以让你更高效的工作"></a>5. 安排好休息时间可以让你更高效的工作</h3><figure name="4465" id="4465"><br><br><img src="https://d262ilb51hltx0.cloudfront.net/max/800/1*tREYaPTUYGW_LAbdOBKbaw.gif" alt=""><br><br><figcaption>老兄，放松一下</figcaption><br><br></figure>

<p>这一点对我来说很难理解并接受。当你没有把全部时间放在工作上时，你怎么可能更有效率呢？好吧，这是真的。</p>
<p>拒Allison Gabriel —— 弗吉尼亚联邦大学一位研究工作要求和员工积极性的管理学教授 —— 所言：“有许多研究指明我们的认知资源是有限的。当你不断的消耗资源时，你不可能始终保持最佳状态。如果你的这些资源被耗尽，就会出现能力下滑。你的最佳状态持续时间会变短并且在解决问题时会遇到困难”。</p>
<p>工作时避开诸如紧张，疲惫和消极情绪这样的应变反应。它们会耗尽你的注意力，你的生理和心理上的资源。</p>
<p>在一天之中，大脑自我调节，遵守纪律的能力随着每一次自我控制减弱。这是一种必须得到补充的资源损失。否则要保持注意力并解决问题会变得越来越难。</p>
<p>你的头脑和身体需要休息，不管你喜不喜欢它们都会这么做。所以，请安排好休息时间。在你的日历上安排真正计划好的休息。这会让你休息时不会产生内疚的感觉。这会使工作时间更容易忍受，因为你知道有一个安排好的休息时间在等待你。</p>
<h3 id="更多帮助和资源"><a href="#更多帮助和资源" class="headerlink" title="更多帮助和资源"></a>更多帮助和资源</h3><p>为了更好的帮助你，我整理了一份<strong>免费</strong>的实用资源(视频，指南，网站)，它可你帮你更好的理解并实践我今天给你展示的内容。你可以<a href="https://devmastery.com/signup/time/index.html" target="_blank" rel="external">在这里获取</a>。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[markdown标签语言学习]]></title>
      <url>https://xu455255849.github.io/2016/07/14/markdown%E6%A0%87%E7%AD%BE%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/</url>
      <content type="html"><![CDATA[<h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><h1 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h1><ul>
<li>lll</li>
<li>asdas</li>
</ul>
<h1 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h1><ol>
<li>1</li>
<li>2</li>
<li>3<blockquote>
<p>这是一个引用</p>
</blockquote>
</li>
</ol>
<h1 id="插入链接"><a href="#插入链接" class="headerlink" title="插入链接"></a>插入链接</h1><p><a href="http://www.baidu.com" target="_blank" rel="external">baidu</a><br><a>text url [external] [title]</a></p>
<h1 id="插入图片"><a href="#插入图片" class="headerlink" title="插入图片"></a>插入图片</h1><p><img src="http://pic31.nipic.com/20130731/10643934_150649261194_2.jpg" alt="img"></p>
<h1 id="粗体和斜体"><a href="#粗体和斜体" class="headerlink" title="粗体和斜体"></a>粗体和斜体</h1><p><strong>这里是粗体</strong>  <em>这里是斜体</em></p>
<h1 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h1><hr>
<h1 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h1><table>
<thead>
<tr>
<th>Tables</th>
<th style="text-align:center">Are</th>
<th style="text-align:right">Cool</th>
</tr>
</thead>
<tbody>
<tr>
<td>col 3 is</td>
<td style="text-align:center">right-aligned</td>
<td style="text-align:right">$1600</td>
</tr>
<tr>
<td>col 2 is</td>
<td style="text-align:center">centered</td>
<td style="text-align:right">$12</td>
</tr>
<tr>
<td>zebra stripes</td>
<td style="text-align:center">are neat</td>
<td style="text-align:right">$1</td>
</tr>
</tbody>
</table>
<hr>
<h1 id="代码框"><a href="#代码框" class="headerlink" title="代码框"></a>代码框</h1><p><code>&lt;code&gt;&lt;/code&gt;</code></p>
<h1 id="这里开始是hexo-next主题专属标签"><a href="#这里开始是hexo-next主题专属标签" class="headerlink" title="这里开始是hexo next主题专属标签"></a>这里开始是hexo next主题专属标签</h1><h1 id="iframe"><a href="#iframe" class="headerlink" title="iframe"></a>iframe</h1><iframe src="url" width="[width]" height="[height]" frameborder="0" allowfullscreen></iframe>
<h1 id="在文章插入视频"><a href="#在文章插入视频" class="headerlink" title="在文章插入视频"></a>在文章插入视频</h1><div class="video-container"><iframe src="//player.vimeo.com/video/video_id" frameborder="0" allowfullscreen></iframe></div>
<h1 id="在首页显示文章图片"><a href="#在首页显示文章图片" class="headerlink" title="在首页显示文章图片"></a>在首页显示文章图片</h1>
<h1 id="在文中插入代码块"><a href="#在文中插入代码块" class="headerlink" title="在文中插入代码块"></a>在文中插入代码块</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">alert(&apos;Hello World!&apos;);</div></pre></td></tr></table></figure>
<h1 id="突破框的图片"><a href="#突破框的图片" class="headerlink" title="突破框的图片"></a>突破框的图片</h1><img src="/images/tou.jpg" class="full-image" alt="alt" title="title">
<h1 id="插入文件夹内的代码文件"><a href="#插入文件夹内的代码文件" class="headerlink" title="插入文件夹内的代码文件"></a>插入文件夹内的代码文件</h1>
<h1 id="文本居中的引用"><a href="#文本居中的引用" class="headerlink" title="文本居中的引用"></a>文本居中的引用</h1><blockquote class="blockquote-center"><p>blah blah blah </p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[mac配置及使用]]></title>
      <url>https://xu455255849.github.io/2016/07/14/mac%E9%85%8D%E7%BD%AE%E5%8F%8A%E4%BD%BF%E7%94%A8/</url>
      <content type="html"><![CDATA[<h1 id="Mac常用命令"><a href="#Mac常用命令" class="headerlink" title="Mac常用命令"></a>Mac常用命令</h1><p>ls 列出目录下文件<br>cd  转到指定目录<br>mkdir 建立新目录<br>把驱动目录下的所有文件备份到桌面backup<br>拷贝文件<br>cp 参数 源文件 目标文件<br>例：想把桌面的Natit.kext 拷贝到驱动目录中<br>cp -R /User/用户名/Desktop/Natit.kext /System/Library/Extensions<br>参数R表示对目录进行递归操作，kext在图形界面下看起来是个文件，实际上是个文件夹。<br>把驱动目录下的所有文件备份到桌面backup<br>cp -R /System/Library/Extensions/* /User/用户名/Desktop/backup<br>删除文件<br>rm 参数 文件<br>例：想删除驱动的缓存<br>rm -rf /System/Library/Extensions.kextcache<br>rm -rf /System/Library/Extensions.mkext<br>参数－rf 表示递归和强制，千万要小心使用，如果执行了 rm -rf / 你的系统就全没了 </p>
<p>移动文件<br>mv 文件<br>例：想把AppleHDA.Kext 移到桌面<br>mv /System/Library/Extensions/AppleHDA.kext /User/用户名/Desktop<br>想把AppleHDA.Kext 移到备份目录中<br>mv /System/Library/Extensions/AppleHDA.kext /System/Library/Extensions/backup<br>管理权限 sudo</p>
<h1 id="Mac终端"><a href="#Mac终端" class="headerlink" title="Mac终端"></a>Mac终端</h1><h2 id="homebrew"><a href="#homebrew" class="headerlink" title="homebrew"></a>homebrew</h2><p><code>ruby -e &quot;$(curl -fsSL https://raw.github.com/mxcl/homebrew/go)&quot;</code></p>
<h2 id="homebrew常用命令"><a href="#homebrew常用命令" class="headerlink" title="homebrew常用命令"></a>homebrew常用命令</h2><p>利用brew安装软件</p>
<p>brew常用命令<br>●brew install name         # 安装源码<br>●brew info svn                # 显示软件的各种信息，包括版本啊源码地址啊等等<br>●brew uninstall name     # 卸载软件，很爽，一键静默卸载<br>●brew search name       # 搜索brew 支持的软件，支持模糊搜索<br>●brew list                       # 列出本机通过brew安装的所有软件<br>●brew update                # 跟新brew软件自身<br>●brew upgrade name    # 更新安装过的软件,如果不加软件名，就更新所有可以更新的软件<br>●brew cleanup              # 清除下载的各种缓存<br>详见man brew</p>
<h2 id="brewcask"><a href="#brewcask" class="headerlink" title="brewcask"></a>brewcask</h2><p>brew cask是一个用命令行管理Mac下应用的工具，它是基于homebrew的一个增强工具。<br><code>brew install brew-cask</code></p>
<p>brew cask的常用命令<br>●brew cask search               # 列出所有可以被安装的软件<br>●brew cask search name     # 查找所有和 name相关的应用<br>●brew cask install name       # 下载安装软件<br>●brew cask uninstall name   # 卸载软件<br>●brew cask info app             # 列出应用的信息<br>●brew cask list                      # 列出本机按照过的软件列表<br>●brew cask cleanup              # 清除下载的缓存以及各种链接信息<br>PS:详见man brew cask</p>
<h1 id="on-my-zsh"><a href="#on-my-zsh" class="headerlink" title="on my zsh"></a>on my zsh</h1><p>wget 自动安装<br><code>wget https://github.com/robbyrussell/oh-my-zsh/raw/master/tools/install.sh -O - | sh</code></p>
<p>还有手动安装的方法，可以自行百度。<br><a href="https://github.com/robbyrussell/oh-my-zsh" target="_blank" rel="external">github源码</a></p>
<h1 id="sublime-text编辑器"><a href="#sublime-text编辑器" class="headerlink" title="sublime text编辑器"></a>sublime text编辑器</h1><p>个人非常推荐的一款编辑器，很强大。可以用brew安装</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Hello World]]></title>
      <url>https://xu455255849.github.io/2016/07/14/hello-world/</url>
      <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    </entry>
    
  
  
</search>
