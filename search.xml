<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[jQuery图片轮播]]></title>
      <url>wwww.mysite.com/2016/07/23/jQuery%E5%9B%BE%E7%89%87%E8%BD%AE%E6%92%AD/</url>
      <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>初学jquery  在网上看到的一片文章 感觉不错 便学习了下。代码上我做了自己的修改  还加了许多学习的注释 代码更易读<br><a href="http://www.cnblogs.com/babyzone2004/archive/2010/08/30/1812682.html" target="_blank" rel="external">转载原文</a><br>本人的修改版源码 <a href="https://github.com/xu455255849/jQuery_photo_media" target="_blank" rel="external">git</a></p>
<h1 id="html源码"><a href="#html源码" class="headerlink" title="html源码"></a>html源码</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html&gt;</div><div class="line">    &lt;head&gt;</div><div class="line">        &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html charset=utf-8&quot; /&gt;</div><div class="line">        &lt;title&gt;图片轮播切换&lt;/title&gt;</div><div class="line">        &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;style.css&quot;&gt;</div><div class="line">        &lt;script type=&quot;text/javascript&quot; src=&quot;jquery-1.12.3.js&quot;&gt;&lt;/script&gt;</div><div class="line">        &lt;script type=&quot;text/javascript&quot; src=&quot;jq.js&quot;&gt;&lt;/script&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line">    &lt;div id=&quot;banner&quot;&gt;</div><div class="line">        &lt;div id=&quot;banner_bg&quot;&gt;&lt;/div&gt; &lt;!-- 标题背景 --&gt;</div><div class="line">        &lt;div id=&quot;banner_info&quot;&gt; &lt;/div&gt; &lt;!-- biaoti --&gt;</div><div class="line">        &lt;ul&gt;</div><div class="line">            &lt;li class=&quot;on&quot;&gt;1&lt;/li&gt;</div><div class="line">            &lt;li&gt;2&lt;/li&gt;</div><div class="line">            &lt;li&gt;3&lt;/li&gt;</div><div class="line">            &lt;li&gt;4&lt;/li&gt;</div><div class="line">        &lt;/ul&gt;</div><div class="line">        &lt;div id=&quot;banner_list&quot;&gt;</div><div class="line">            &lt;a href=&quot;https://xu455255849.github.io/&quot; target=&quot;_blank&quot; &gt;</div><div class="line">                &lt;img src=&quot;./images/1.jpg&quot; title=&quot;111&quot; alt=&quot;z1111&quot; width=800 height=480&gt;</div><div class="line">            &lt;/a&gt;</div><div class="line">             &lt;a href=&quot;https://github.com/xu455255849/xu455255849.github.io&quot; target=&quot;_blank&quot; &gt;</div><div class="line">                &lt;img src=&quot;./images/2.jpg&quot; title=&quot;222&quot; alt=&quot;z2222111&quot; width=800 height=480&gt;</div><div class="line">            &lt;/a&gt;</div><div class="line">             &lt;a href=&quot;#&quot; target=&quot;_blank&quot; &gt;</div><div class="line">                &lt;img src=&quot;./images/3.jpg&quot; title=&quot;333&quot; alt=&quot;z333311&quot; width=800 height=480&gt;</div><div class="line">            &lt;/a&gt;</div><div class="line">             &lt;a href=&quot;#&quot; target=&quot;_blank&quot; &gt;</div><div class="line">                &lt;img src=&quot;./images/4.jpg&quot; title=&quot;444&quot; alt=&quot;zh44411&quot; width=800 height=480&gt;</div><div class="line">            &lt;/a&gt;</div><div class="line">        &lt;/div&gt;</div><div class="line">    &lt;/div&gt;</div><div class="line"></div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>
<h1 id="样式"><a href="#样式" class="headerlink" title="样式"></a>样式</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div></pre></td><td class="code"><pre><div class="line">#banner &#123;</div><div class="line">	position: relative;</div><div class="line">	width: 800px;</div><div class="line">	height: 480px;</div><div class="line">	border: 1px solid #666;</div><div class="line">	overflow: hidden;</div><div class="line">&#125;</div><div class="line"></div><div class="line">#banner_list img &#123;</div><div class="line">	border: 0px;</div><div class="line">&#125;</div><div class="line"></div><div class="line">#banner_bg &#123;</div><div class="line">	position: absolute;</div><div class="line">	bottom: 0;</div><div class="line">	background-color: #000;</div><div class="line">	height: 30px;</div><div class="line">	opacity: 0.3;</div><div class="line">	z-index: 999;</div><div class="line">	cursor: pointer;</div><div class="line">	width: 578px;</div><div class="line">&#125;</div><div class="line"></div><div class="line">#banner_info &#123;</div><div class="line">	position: absolute;</div><div class="line">	bottom: 0;</div><div class="line">	left: 5px;</div><div class="line">	height: 22px;</div><div class="line">	color: #fff;</div><div class="line">	z-index: 1000;</div><div class="line">	cursor: pointer;</div><div class="line">&#125;</div><div class="line"></div><div class="line">#banner ul &#123;</div><div class="line">	position: absolute;</div><div class="line">	list-style: none;</div><div class="line">	opacity: 0.8;</div><div class="line">	border: 1px solid #fff;</div><div class="line">	z-index: 1002;</div><div class="line">	margin: 0;</div><div class="line">	padding: 0;</div><div class="line">	bottom: 3px;</div><div class="line">	right: 5px;</div><div class="line">&#125;</div><div class="line"></div><div class="line">#banner ul li &#123;</div><div class="line">	padding: 0px 8px;</div><div class="line">	float: left;</div><div class="line">	display: list-item;</div><div class="line">	color: #fff;</div><div class="line">	border: #e5eaff 1px solid;</div><div class="line">	background-color: black;</div><div class="line">	cursor: pointer;</div><div class="line">	</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">#banner ul li.on &#123;</div><div class="line">	background-color: red;</div><div class="line">	</div><div class="line"></div><div class="line">	color: pink; </div><div class="line">&#125;</div><div class="line"></div><div class="line">#banner_list a &#123;</div><div class="line">	position: absolute;  /* 让图片重叠在一起 */</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"></div></pre></td></tr></table></figure>
<h1 id="js代码"><a href="#js代码" class="headerlink" title="js代码"></a>js代码</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"> var t = 0; </div><div class="line"> var n = 0;</div><div class="line"> var count</div><div class="line"> $(document).ready(function()&#123;   </div><div class="line">     count=$(&quot;#banner_list a&quot;).length;</div><div class="line">     // count赋值为a长度 为4</div><div class="line">     $(&quot;#banner_list a:not(:first-child)&quot;).hide();</div><div class="line">     // 隐藏后面所有的a图片</div><div class="line">     $(&quot;#banner_info&quot;).html($(&quot;#banner_list a:first-child&quot;).find(&quot;img&quot;).attr(&apos;alt&apos;));</div><div class="line">     // 找到id为banner_info的html标签 设置为 a img 的alt属性值</div><div class="line"></div><div class="line">     $(&quot;#banner_info&quot;).click(function()&#123;window.open($(&quot;#banner_list a:first-child&quot;).attr(&apos;href&apos;), &quot;_blank&quot;)&#125;);</div><div class="line">     //点击info栏 在新窗口打开href为list 的属性 的页面</div><div class="line">     $(&quot;#banner li&quot;).click(function() &#123;  // 以上为初始化函数 这里开始为循环体函数</div><div class="line">         var i = $(this).text() - 1;//获取Li元素内的值，即1，2，3，4</div><div class="line">         n = i;</div><div class="line">       </div><div class="line">         $(&quot;#banner_info&quot;).html($(&quot;#banner_list a&quot;).eq(i).find(&quot;img&quot;).attr(&apos;alt&apos;));</div><div class="line">         //根据下标修改info</div><div class="line">         $(&quot;#banner_info&quot;).unbind().click(function()&#123;window.open($(&quot;#banner_list a&quot;).eq(i).attr(&apos;href&apos;), &quot;_blank&quot;)&#125;)</div><div class="line">         //移除原有的点击事件 修改为新事件｛地址改为图片href｝</div><div class="line">         $(&quot;#banner_list a&quot;).filter(&quot;:visible&quot;).fadeOut(500).parent().children().eq(i).fadeIn(1000);</div><div class="line">         // 返回显示的图片 消失 返回 小标为i的a 链接图片 显示</div><div class="line">         document.getElementById(&quot;banner&quot;).style.background=&quot;&quot;;</div><div class="line">         $(this).toggleClass(&quot;on&quot;); </div><div class="line">         $(this).siblings().removeAttr(&quot;class&quot;);</div><div class="line">     &#125;);</div><div class="line">     t = setInterval(&quot;showAuto()&quot;, 2000);</div><div class="line">     $(&quot;#banner&quot;).hover(function()&#123;clearInterval(t)&#125;, function()&#123;t = setInterval(&quot;showAuto()&quot;, 2000);&#125;);</div><div class="line"> &#125;)</div><div class="line"> </div><div class="line">function showAuto()   // 定义循环函数 n自增</div><div class="line"> &#123;</div><div class="line">     n = n &gt;=(count - 1) ? 0 : ++n;  </div><div class="line">     $(&quot;#banner li&quot;).eq(n).trigger(&apos;click&apos;);  //触发事件 开始执行内循环</div><div class="line"> &#125;</div></pre></td></tr></table></figure>
<h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p> 资历尚浅 想不到更好的遍历方式 希望能早日写出自己的代码！共勉～</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[初学react]]></title>
      <url>wwww.mysite.com/2016/07/19/%E5%88%9D%E5%AD%A6react/</url>
      <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>React 起源于 Facebook 的内部项目，因为 FB 对市场上所有 JavaScript MVC 框架，都不满意，就决定自己写一套，用来架设 Instagram 的网站。做出来以后，发现这套东西很好用，就在2013年5月开源了</p>
<h1 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h1>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[AIRbnp－用更合理的方式书写js]]></title>
      <url>wwww.mysite.com/2016/07/17/AIRbnp%EF%BC%8D%E7%94%A8%E6%9B%B4%E5%90%88%E7%90%86%E7%9A%84%E6%96%B9%E5%BC%8F%E4%B9%A6%E5%86%99js/</url>
      <content type="html"><![CDATA[<blockquote class="blockquote-center"><p>如何更合理的书写js </p>
</blockquote>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>今天在github上发现的一篇关于代码规范，我觉得关于怎么写代码这一点是比较重要的<br>.我个人认为基础是重要的，我便着重记录了下基础的语法。想要看全部内容的人可以点击下面的<br>github链接 。<br><a href="https://github.com/sivan/javascript-style-guide/blob/master/es5/README.md" target="_blank" rel="external">github</a></p>
<h1 id="类型"><a href="#类型" class="headerlink" title="类型"></a>类型</h1><h2 id="原始值：存取直接作用于它自身。"><a href="#原始值：存取直接作用于它自身。" class="headerlink" title="原始值：存取直接作用于它自身。"></a>原始值：存取直接作用于它自身。</h2><ul>
<li>string</li>
<li>number</li>
<li>boolean</li>
<li>null</li>
<li>underfined<br>`var foo = 1;<br>var bar = foo;</li>
</ul>
<p>bar = 9;</p>
<p>console.log(foo, bar); // =&gt; 1, 9`</p>
<h2 id="复杂类型：-存取时作用于它自身值的引用。"><a href="#复杂类型：-存取时作用于它自身值的引用。" class="headerlink" title="复杂类型：: 存取时作用于它自身值的引用。"></a>复杂类型：: 存取时作用于它自身值的引用。</h2><ul>
<li>object</li>
<li>array</li>
<li>function</li>
</ul>
<p>`var foo = [1, 2];<br>var bar = foo;</p>
<p>bar[0] = 9;</p>
<p>console.log(foo[0], bar[0]); // =&gt; 9, 9`</p>
<p>我的理解是基本类型是传值，而复杂类型传递的是内存地址。</p>
<h1 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h1><p>使用直接量创建对象</p>
<p>`// bad<br>var item = new Object();</p>
<p>// good<br>var item = {};`</p>
<p>不要使用保留字作为键名<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">// bad</div><div class="line">var superman = &#123;</div><div class="line">  default: &#123; clark: &apos;kent&apos; &#125;,</div><div class="line">  private: true</div><div class="line">&#125;;</div><div class="line"></div><div class="line">// good</div><div class="line">var superman = &#123;</div><div class="line">  defaults: &#123; clark: &apos;kent&apos; &#125;,</div><div class="line">  hidden: true</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p>使用同义词替换保留字</p>
<p>`// bad<br>var superman = {<br>  class: ‘alien’<br>};</p>
<p>// bad<br>var superman = {<br>  klass: ‘alien’<br>};</p>
<p>// good<br>var superman = {<br>  type: ‘alien’<br>};`</p>
<h1 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h1><p>使用直接量创建数组</p>
<p>`// bad<br>var items = new Array();</p>
<p>// good<br>var items = [];`</p>
<p>向数组增加元素时使用 Array#push 来替代直接赋值。</p>
<p>`var someStack = [];</p>
<p>// bad<br>someStack[someStack.length] = ‘abracadabra’;</p>
<p>// good<br>someStack.push(‘abracadabra’);`</p>
<p>当你需要拷贝数组时，使用 Array#slice</p>
<p>`var len = items.length;<br>var itemsCopy = [];<br>var i;</p>
<p>// bad<br>for (i = 0; i &lt; len; i++) {<br>  itemsCopy[i] = items[i];<br>}</p>
<p>// good<br>itemsCopy = items.slice();`</p>
<p>使用 Array#slice 将类数组对象转换成数组。</p>
<p><code>function trigger() {
  var args = Array.prototype.slice.call(arguments);
  ...
}</code></p>
<h1 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h1><p>使用单引号 ‘’ 包裹字符串。</p>
<p>`// bad<br>var name = “Bob Parr”;</p>
<p>// good<br>var name = ‘Bob Parr’;</p>
<p>// bad<br>var fullName = “Bob “ + this.lastName;</p>
<p>// good<br>var fullName = ‘Bob ‘ + this.lastName;`</p>
<p>超过 100 个字符的字符串应该使用连接符写成多行。</p>
<p>注：若过度使用，通过连接符连接的长字符串可能会影响性能</p>
<p>`// bad<br>var errorMessage = ‘This is a super long error that was thrown because of Batman. When you stop to think about how Batman had anything to do with this, you would get nowhere fast.’;</p>
<p>// bad<br>var errorMessage = ‘This is a super long error that was thrown because \<br>of Batman. When you stop to think about how Batman had anything to do \<br>with this, you would get nowhere \<br>fast.’;</p>
<p>// good<br>var errorMessage = ‘This is a super long error that was thrown because ‘ +<br>  ‘of Batman. When you stop to think about how Batman had anything to do ‘ +<br>  ‘with this, you would get nowhere fast.’;`</p>
<p>程序化生成的字符串使用 Array#join 连接而不是使用连接符</p>
<p>`var items;<br>var messages;<br>var length;<br>var i;</p>
<p>messages = [{<br>  state: ‘success’,<br>  message: ‘This one worked.’<br>}, {<br>  state: ‘success’,<br>  message: ‘This one worked as well.’<br>}, {<br>  state: ‘error’,<br>  message: ‘This one did not work.’<br>}];</p>
<p>length = messages.length;</p>
<p>// bad<br>function inbox(messages) {<br>  items = ‘<ul>‘;</ul></p>
<p>  for (i = 0; i &lt; length; i++) {<br>    items += ‘<li>‘ + messages[i].message + ‘</li>‘;<br>  }</p>
<p>  return items + ‘‘;<br>}</p>
<p>// good<br>function inbox(messages) {<br>  items = [];</p>
<p>  for (i = 0; i &lt; length; i++) {<br>    // use direct assignment in this case because we’re micro-optimizing.<br>    items[i] = ‘<li>‘ + messages[i].message + ‘</li>‘;<br>  }</p>
<p>  return ‘<ul>‘ + items.join(‘’) + ‘</ul>‘;<br>}`</p>
<h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><p>函数表达式：</p>
<p>`// 匿名函数表达式<br>var anonymous = function() {<br>  return true;<br>};</p>
<p>// 命名函数表达式<br>var named = function named() {<br>  return true;<br>};</p>
<p>// 立即调用的函数表达式（IIFE）<br>(function () {<br>  console.log(‘Welcome to the Internet. Please follow me.’);<br>}());`</p>
<p>永远不要在一个非函数代码块（if、while 等）中声明一个函数，把那个函数赋给一个变量。浏览器允许你这么做，但它们的解析表现不一致。</p>
<p>注： ECMA-262 把 块 定义为一组语句。函数声明不是语句。阅读对 ECMA-262 这个问题的说明。</p>
<p>`// bad<br>if (currentUser) {<br>  function test() {<br>    console.log(‘Nope.’);<br>  }<br>}</p>
<p>// good<br>var test;<br>if (currentUser) {<br>  test = function test() {<br>    console.log(‘Yup.’);<br>  };<br>}`</p>
<p>永远不要把参数命名为 arguments。这将取代函数作用域内的 arguments 对象</p>
<p>`// bad<br>function nope(name, options, arguments) {<br>  // …stuff…<br>}</p>
<p>// good<br>function yup(name, options, args) {<br>  // …stuff…<br>}`</p>
<h1 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h1><p>使用 . 来访问对象的属性</p>
<p>`var luke = {<br>  jedi: true,<br>  age: 28<br>};</p>
<p>// bad<br>var isJedi = luke[‘jedi’];</p>
<p>// good<br>var isJedi = luke.jedi;`</p>
<p>当通过变量访问属性时使用中括号 []。</p>
<p>`var luke = {<br>  jedi: true,<br>  age: 28<br>};</p>
<p>function getProp(prop) {<br>  return luke[prop];<br>}</p>
<p>var isJedi = getProp(‘jedi’);`</p>
<h1 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h1><p>总是使用 var 来声明变量。不这么做将导致产生全局变量。我们要避免污染全局命名空间。</p>
<p>`// bad<br>superPower = new SuperPower();</p>
<p>// good<br>var superPower = new SuperPower();`</p>
<p>使用 var 声明每一个变量。 这样做的好处是增加新变量将变的更加容易，而且你永远不用再担心调换错 ; 跟 ,。</p>
<p>`// bad<br>var items = getItems(),<br>    goSportsTeam = true,<br>    dragonball = ‘z’;</p>
<p>// bad<br>// （跟上面的代码比较一下，看看哪里错了）<br>var items = getItems(),<br>    goSportsTeam = true;<br>    dragonball = ‘z’;</p>
<p>// good<br>var items = getItems();<br>var goSportsTeam = true;<br>var dragonball = ‘z’;`</p>
<p>最后再声明未赋值的变量。当你需要引用前面的变量赋值时这将变的很有用。</p>
<p>`// bad<br>var i, len, dragonball,<br>    items = getItems(),<br>    goSportsTeam = true;</p>
<p>// bad<br>var i;<br>var items = getItems();<br>var dragonball;<br>var goSportsTeam = true;<br>var len;</p>
<p>// good<br>var items = getItems();<br>var goSportsTeam = true;<br>var dragonball;<br>var length;<br>var i;`</p>
<p>在作用域顶部声明变量。这将帮你避免变量声明提升相关的问题。</p>
<p>`// bad<br>function () {<br>  test();<br>  console.log(‘doing stuff..’);</p>
<p>  //..other stuff..</p>
<p>  var name = getName();</p>
<p>  if (name === ‘test’) {<br>    return false;<br>  }</p>
<p>  return name;<br>}</p>
<p>// good<br>function () {<br>  var name = getName();</p>
<p>  test();<br>  console.log(‘doing stuff..’);</p>
<p>  //..other stuff..</p>
<p>  if (name === ‘test’) {<br>    return false;<br>  }</p>
<p>  return name;<br>}</p>
<p>// bad - 不必要的函数调用<br>function () {<br>  var name = getName();</p>
<p>  if (!arguments.length) {<br>    return false;<br>  }</p>
<p>  this.setFirstName(name);</p>
<p>  return true;<br>}</p>
<p>// good<br>function () {<br>  var name;</p>
<p>  if (!arguments.length) {<br>    return false;<br>  }</p>
<p>  name = getName();<br>  this.setFirstName(name);</p>
<p>  return true;<br>}`</p>
<h1 id="分号"><a href="#分号" class="headerlink" title="分号"></a>分号</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">// bad</div><div class="line">(function () &#123;</div><div class="line">  var name = &apos;Skywalker&apos;</div><div class="line">  return name</div><div class="line">&#125;)()</div><div class="line"></div><div class="line">// good</div><div class="line">(function () &#123;</div><div class="line">  var name = &apos;Skywalker&apos;;</div><div class="line">  return name;</div><div class="line">&#125;)();</div><div class="line"></div><div class="line">// good (防止函数在两个 IIFE 合并时被当成一个参数</div><div class="line">;(function () &#123;</div><div class="line">  var name = &apos;Skywalker&apos;;</div><div class="line">  return name;</div><div class="line">&#125;)();</div></pre></td></tr></table></figure>
<blockquote>
<p>添加分号是比较重要的，这关乎到你的代码压缩和性能，没有正确使用分号浏览器会自动<br>添加，这会损失一部分性能，并且压缩的效果会大打折扣。［会把中间的空格视为代码块］</p>
</blockquote>
<p>这里还有2篇规范 一起记录下来 以备用。［目前水平太渣］</p>
<p><a href="https://github.com/JasonBoy/javascript/tree/master/react" target="_blank" rel="external">jsx代码规范-react</a><br><a href="https://github.com/Zhangjd/css-style-guide" target="_blank" rel="external">Airbnb CSS / Sass 指南</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[寻找时间成为一名优秀的程序员]]></title>
      <url>wwww.mysite.com/2016/07/16/%E5%AF%BB%E6%89%BE%E6%97%B6%E9%97%B4%E6%88%90%E4%B8%BA%E4%B8%80%E5%90%8D%E4%BC%98%E7%A7%80%E7%9A%84%E7%A8%8B%E5%BA%8F%E5%91%98/</url>
      <content type="html"><![CDATA[<h1 id="寻找时间成为一名更优秀的程序员"><a href="#寻找时间成为一名更优秀的程序员" class="headerlink" title="寻找时间成为一名更优秀的程序员"></a>寻找时间成为一名更优秀的程序员</h1><blockquote>
<p>本文转载自：<a href="http://www.zcfy.cc" target="_blank" rel="external">众成翻译</a><br>译者：<a href="http://www.zcfy.cc/@loveky" target="_blank" rel="external">loveky</a><br>链接：<a href="http://www.zcfy.cc/article/769" target="_blank" rel="external">http://www.zcfy.cc/article/769</a><br>原文：<a href="https://medium.freecodecamp.com/finding-time-to-become-a-better-developer-eebc154881b2#.t1uuonhtf" target="_blank" rel="external">https://medium.freecodecamp.com/finding-time-to-become-a-better-developer-eebc154881b2#.t1uuonhtf</a></p>
</blockquote>
<p><img src="https://d262ilb51hltx0.cloudfront.net/max/800/1*Y0koaXjHnJSrzB6vK4STqQ.png" alt=""></p>
<p>没有时间做任何事。这就是你感受，不是吗？没有时间学习你觉得你需要学会以跟上潮流的知识。没有时间回过头去重构那些丑陋的代码。它至少能工作，何况截止日期马上就要到了。没有时间编写单元测试。没有时间为今后要维护你代码的伙计编写文档或注释。没有时间思考。没有时间呼吸。没时间！</p>
<p>好吧…如果你能花时间阅读本文，我保证你自己会为那些重要的事找到更多时间。</p>
<p>我曾经以为成为一名伟大程序员的唯一途径就拼命工作。我的健康，友谊，家庭都因此受到影响。理解以下5个关于时间管理的真相拯救了我。</p>
<h3 id="1-你不需要为了赶潮流而学习每一个新事物"><a href="#1-你不需要为了赶潮流而学习每一个新事物" class="headerlink" title="1. 你不需要为了赶潮流而学习每一个新事物"></a>1. 你不需要为了赶潮流而学习每一个新事物</h3><figure name="4449" id="4449"><br><br><img src="https://d262ilb51hltx0.cloudfront.net/max/800/1*nlHiraEMnpECFoi3_nIV4g.gif" alt=""><br><br><figcaption>你不需要</figcaption><br><br></figure>

<p>毫无疑问一个优秀的程序员应该保持不断的学习，但是你把学习的焦点放在哪儿能在很大程度上影响你需要花费的时间。</p>
<blockquote>
<p>“老的事物已经死去，(终归老去的)新事物万岁！”</p>
</blockquote>
<p>首先，不要被出现在那些每37秒就宣布一个新标准的博客上的头条所愚弄。这些新技术，新框架，新特性中的大多数永远都不会被认可与采纳，因此你根本不需要了解它们。那些真正能够脱颖而出的也会经历比博客圈和发明厂商宣传的长的多的时间才会被采用。公司投资于他们的技术栈 —— 和那些小创业公司不一样，他们不可能说变就变。所以，放松一下，你的职业生涯很安全。</p>
<p>把你的学习聚焦在三方面，以下面列出的顺序为优先级：</p>
<ol>
<li><strong>基础</strong> —— 当你有了非常扎实的基础知识之后，学习新技能会变得非常容易。举个例子，如果你对JavaScript有着深入的了解，你就可以飞速的掌握任何新的JavaScript框架。如果你深入学习了面向对象编程，你也能快速掌握任何新的面向对象语言。深入学习基础知识会极大的提高你的学习效率。始终把提高对基础知识的掌握放在第一位。</li>
<li><strong>你最常使用的技术栈的最新版本/特性</strong> —— 存在一套你每天都会使用的技术栈。这些是可以帮你养活你及你家人的工具。当这些工具的新版本发布时，投入时间学习是很值得的。</li>
<li><strong>由市场领导者主导的流行技术</strong> —— 如果一个颇具规模的公司，比如Google，Facebook或是Microsoft提出某项新技术并已经开始小有名气，这也值得你的关注。市面上曾经有许多JavaScript框架争夺人们的注意力，然后Angular和React出现了并将那些框架彻底消灭。我不是说今后不会有搅局者出现成为下一个焦点，但实际情况往往是杂牌技术只不过是一些噪音。</li>
</ol>
<p>学习时间应该是你日程安排的一部分。每天抽出一点时间来学习。这不需要很长的时间，即使是每天花25分钟阅读和练习也可以快速积累。</p>
<h3 id="2-编写优秀的代码比编写糟糕的代码需要更少的时间，但感觉上并不是这样"><a href="#2-编写优秀的代码比编写糟糕的代码需要更少的时间，但感觉上并不是这样" class="headerlink" title="2. 编写优秀的代码比编写糟糕的代码需要更少的时间，但感觉上并不是这样"></a>2. 编写优秀的代码比编写糟糕的代码需要更少的时间，但感觉上并不是这样</h3><figure name="b2cc" id="b2cc"><br><br><img src="https://d262ilb51hltx0.cloudfront.net/max/800/1*T_iEqRX_YzZjmQeaRgk2mA.gif" alt=""><br><br><figcaption>时间是一个扁圆</figcaption><br><br></figure>

<p>你很可能喜欢开发完几个新功能后当你试着运行并且发现似乎可以正常工作时那一刻的感受。但那只是你时间投入的开始。在一个功能上投入的时间包括了后期调试的时间，重构花费的时间以及解决由于开发时的不良设计导致的其它问题的时间。当你开始以这种方式认识你的时间投入时，你会发现，从长远来看，更少的错误和更好的设计是值得投资的。</p>
<p>你可以做两件事来减少代码中的错误并实现更好的设计。</p>
<ol>
<li><strong>使用测试驱动开发</strong> 首先编写测试，然后编写代码以使测试通过。这不仅会减少bug还会导致更好的设计，因为当你按照可测试的方式组织代码时，你最终会得到更小，更简单的，依赖更少的函数。</li>
<li><strong>使用迭代的设计方式</strong> 在你的代码能真正工作之前，不要花时间试图让你的代码变完美。你永远不可能在脑子里把它设计的完全正确。你必须敲击键盘来生成实现预期功能的代码。问题是程序员尝尝犯两个常见的错误：要么时花了太多时间思考而没有足够的时间动手，要么就是不去优化他们最初的方案。遵循最初由Kent Beck提出的口头禅：“make it work, make it right, make it fast” —— 按照话中的顺序。</li>
</ol>
<h3 id="3-7x24的工作不会让你成为英雄，管理预期才会"><a href="#3-7x24的工作不会让你成为英雄，管理预期才会" class="headerlink" title="3. 7x24的工作不会让你成为英雄，管理预期才会"></a>3. 7x24的工作不会让你成为英雄，管理预期才会</h3><figure name="a063" id="a063"><br><br><img src="https://d262ilb51hltx0.cloudfront.net/max/800/1*NyLgzD71S8ZmsZ1QWRTYtw.gif" alt=""><br><br><figcaption>下班到家，开始工作!</figcaption><br><br></figure>

<p>这一条几乎杀了我。我曾经同意并承诺过我老板或客户提出的任何疯狂的时间表。我害怕说“不”。我害怕让任何人失望。为了交付我可以做任何事。我曾经睡在办公桌下，有过多次长达40+小时的马拉松式的编程经历。</p>
<p>起初我是一颗耀眼的明星。别人对我大加赞赏，我感觉自己像是个英雄。但是我设置了一个不可能实现的预期。不可能长久的像那样工作。最终我开始疲惫不堪，生病并错过截止日期。我开始得到不可靠的名声。这是个坏消息。</p>
<p>最后我终于明白真正的英雄是那些持续可靠的人。他们说到做到。要成为那样的英雄的唯一途径就是管理预期。</p>
<p>你需要控制时间表以便总是可以按时交付高质量的工作。起初这会非常困难。这意味着必须说“不”并把需求打回。</p>
<p>在最开始，你的老板和客户不会被你的拒绝刺激到。但一旦你证明自己是值得信赖的，一切都将开始改变。</p>
<p>随着时间的推移，其它程序员会迟到，交付马虎的工作或是筋疲力竭变得不可靠。这时你就会成为团队中真正的英雄。事实上，学会这一点让我成为我的领域里最受欢迎的咨询顾问。由于狠抓预期管理，我在质量和时效性方面建立了良好的声誉。</p>
<h3 id="4-不是所有花在“改善”代码上的时间都会得到相同的回报"><a href="#4-不是所有花在“改善”代码上的时间都会得到相同的回报" class="headerlink" title="4. 不是所有花在“改善”代码上的时间都会得到相同的回报"></a>4. 不是所有花在“改善”代码上的时间都会得到相同的回报</h3><figure name="e7c5" id="e7c5"><br><br><img src="https://d262ilb51hltx0.cloudfront.net/max/800/1*JMk2wpkTz9SKzs1D9s7-CA.png" alt=""><br><br></figure>

<p>花费时间是一种投资。和所有投资一样，投资回报率是一个合理的期望。你的所得至少应该和投入一样多，希望是越多越好。</p>
<p>我们已经谈论过“make it work, make it right, make it fast”。这个是不错的口头禅但这里有一个陷阱：“right”并不意味着完美，“fast”也不是说越快越好。</p>
<p>“Right”的含义是代码可以正常工作并且容易重构。“Fast”意味着执行速度对整体的用户体验没有负面影响。最重要的是你的程序让用户<strong>感觉起来</strong>很快。</p>
<p>所以，不要花时间尝试降低一个几乎不被使用的函数的执行时间，或是试图把一个比人眨眼（大约300ms）还快的函数的速度再提升几毫秒。也不要仅仅是因为学了一点新技术/方法就说服自己回过头去浪费时间重构那些组织良好，正常工作的代码。</p>
<h3 id="5-安排好休息时间可以让你更高效的工作"><a href="#5-安排好休息时间可以让你更高效的工作" class="headerlink" title="5. 安排好休息时间可以让你更高效的工作"></a>5. 安排好休息时间可以让你更高效的工作</h3><figure name="4465" id="4465"><br><br><img src="https://d262ilb51hltx0.cloudfront.net/max/800/1*tREYaPTUYGW_LAbdOBKbaw.gif" alt=""><br><br><figcaption>老兄，放松一下</figcaption><br><br></figure>

<p>这一点对我来说很难理解并接受。当你没有把全部时间放在工作上时，你怎么可能更有效率呢？好吧，这是真的。</p>
<p>拒Allison Gabriel —— 弗吉尼亚联邦大学一位研究工作要求和员工积极性的管理学教授 —— 所言：“有许多研究指明我们的认知资源是有限的。当你不断的消耗资源时，你不可能始终保持最佳状态。如果你的这些资源被耗尽，就会出现能力下滑。你的最佳状态持续时间会变短并且在解决问题时会遇到困难”。</p>
<p>工作时避开诸如紧张，疲惫和消极情绪这样的应变反应。它们会耗尽你的注意力，你的生理和心理上的资源。</p>
<p>在一天之中，大脑自我调节，遵守纪律的能力随着每一次自我控制减弱。这是一种必须得到补充的资源损失。否则要保持注意力并解决问题会变得越来越难。</p>
<p>你的头脑和身体需要休息，不管你喜不喜欢它们都会这么做。所以，请安排好休息时间。在你的日历上安排真正计划好的休息。这会让你休息时不会产生内疚的感觉。这会使工作时间更容易忍受，因为你知道有一个安排好的休息时间在等待你。</p>
<h3 id="更多帮助和资源"><a href="#更多帮助和资源" class="headerlink" title="更多帮助和资源"></a>更多帮助和资源</h3><p>为了更好的帮助你，我整理了一份<strong>免费</strong>的实用资源(视频，指南，网站)，它可你帮你更好的理解并实践我今天给你展示的内容。你可以<a href="https://devmastery.com/signup/time/index.html" target="_blank" rel="external">在这里获取</a>。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[markdown标签语言学习]]></title>
      <url>wwww.mysite.com/2016/07/14/markdown%E6%A0%87%E7%AD%BE%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/</url>
      <content type="html"><![CDATA[<h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><h1 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h1><ul>
<li>lll</li>
<li>asdas</li>
</ul>
<h1 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h1><ol>
<li>1</li>
<li>2</li>
<li>3<blockquote>
<p>这是一个引用</p>
</blockquote>
</li>
</ol>
<h1 id="插入链接"><a href="#插入链接" class="headerlink" title="插入链接"></a>插入链接</h1><p><a href="http://www.baidu.com" target="_blank" rel="external">baidu</a><br><a>text url [external] [title]</a></p>
<h1 id="插入图片"><a href="#插入图片" class="headerlink" title="插入图片"></a>插入图片</h1><p><img src="http://pic31.nipic.com/20130731/10643934_150649261194_2.jpg" alt="img"></p>
<h1 id="粗体和斜体"><a href="#粗体和斜体" class="headerlink" title="粗体和斜体"></a>粗体和斜体</h1><p><strong>这里是粗体</strong>  <em>这里是斜体</em></p>
<h1 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h1><hr>
<h1 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h1><table>
<thead>
<tr>
<th>Tables</th>
<th style="text-align:center">Are</th>
<th style="text-align:right">Cool</th>
</tr>
</thead>
<tbody>
<tr>
<td>col 3 is</td>
<td style="text-align:center">right-aligned</td>
<td style="text-align:right">$1600</td>
</tr>
<tr>
<td>col 2 is</td>
<td style="text-align:center">centered</td>
<td style="text-align:right">$12</td>
</tr>
<tr>
<td>zebra stripes</td>
<td style="text-align:center">are neat</td>
<td style="text-align:right">$1</td>
</tr>
</tbody>
</table>
<hr>
<h1 id="代码框"><a href="#代码框" class="headerlink" title="代码框"></a>代码框</h1><p><code>&lt;code&gt;&lt;/code&gt;</code></p>
<h1 id="这里开始是hexo-next主题专属标签"><a href="#这里开始是hexo-next主题专属标签" class="headerlink" title="这里开始是hexo next主题专属标签"></a>这里开始是hexo next主题专属标签</h1><h1 id="iframe"><a href="#iframe" class="headerlink" title="iframe"></a>iframe</h1><iframe src="url" width="[width]" height="[height]" frameborder="0" allowfullscreen></iframe>
<h1 id="在文章插入视频"><a href="#在文章插入视频" class="headerlink" title="在文章插入视频"></a>在文章插入视频</h1><div class="video-container"><iframe src="//player.vimeo.com/video/video_id" frameborder="0" allowfullscreen></iframe></div>
<h1 id="在首页显示文章图片"><a href="#在首页显示文章图片" class="headerlink" title="在首页显示文章图片"></a>在首页显示文章图片</h1>
<h1 id="在文中插入代码块"><a href="#在文中插入代码块" class="headerlink" title="在文中插入代码块"></a>在文中插入代码块</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">alert(&apos;Hello World!&apos;);</div></pre></td></tr></table></figure>
<h1 id="突破框的图片"><a href="#突破框的图片" class="headerlink" title="突破框的图片"></a>突破框的图片</h1><img src="/images/tou.jpg" class="full-image" alt="alt" title="title">
<h1 id="插入文件夹内的代码文件"><a href="#插入文件夹内的代码文件" class="headerlink" title="插入文件夹内的代码文件"></a>插入文件夹内的代码文件</h1>
<h1 id="文本居中的引用"><a href="#文本居中的引用" class="headerlink" title="文本居中的引用"></a>文本居中的引用</h1><blockquote class="blockquote-center"><p>blah blah blah </p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[mac配置及使用]]></title>
      <url>wwww.mysite.com/2016/07/14/mac%E9%85%8D%E7%BD%AE%E5%8F%8A%E4%BD%BF%E7%94%A8/</url>
      <content type="html"><![CDATA[<h1 id="Mac常用命令"><a href="#Mac常用命令" class="headerlink" title="Mac常用命令"></a>Mac常用命令</h1><p>ls 列出目录下文件<br>cd  转到指定目录<br>mkdir 建立新目录<br>把驱动目录下的所有文件备份到桌面backup<br>拷贝文件<br>cp 参数 源文件 目标文件<br>例：想把桌面的Natit.kext 拷贝到驱动目录中<br>cp -R /User/用户名/Desktop/Natit.kext /System/Library/Extensions<br>参数R表示对目录进行递归操作，kext在图形界面下看起来是个文件，实际上是个文件夹。<br>把驱动目录下的所有文件备份到桌面backup<br>cp -R /System/Library/Extensions/* /User/用户名/Desktop/backup<br>删除文件<br>rm 参数 文件<br>例：想删除驱动的缓存<br>rm -rf /System/Library/Extensions.kextcache<br>rm -rf /System/Library/Extensions.mkext<br>参数－rf 表示递归和强制，千万要小心使用，如果执行了 rm -rf / 你的系统就全没了 </p>
<p>移动文件<br>mv 文件<br>例：想把AppleHDA.Kext 移到桌面<br>mv /System/Library/Extensions/AppleHDA.kext /User/用户名/Desktop<br>想把AppleHDA.Kext 移到备份目录中<br>mv /System/Library/Extensions/AppleHDA.kext /System/Library/Extensions/backup<br>管理权限 sudo</p>
<h1 id="Mac终端"><a href="#Mac终端" class="headerlink" title="Mac终端"></a>Mac终端</h1><h2 id="homebrew"><a href="#homebrew" class="headerlink" title="homebrew"></a>homebrew</h2><p><code>ruby -e &quot;$(curl -fsSL https://raw.github.com/mxcl/homebrew/go)&quot;</code></p>
<h2 id="homebrew常用命令"><a href="#homebrew常用命令" class="headerlink" title="homebrew常用命令"></a>homebrew常用命令</h2><p>利用brew安装软件</p>
<p>brew常用命令<br>●brew install name         # 安装源码<br>●brew info svn                # 显示软件的各种信息，包括版本啊源码地址啊等等<br>●brew uninstall name     # 卸载软件，很爽，一键静默卸载<br>●brew search name       # 搜索brew 支持的软件，支持模糊搜索<br>●brew list                       # 列出本机通过brew安装的所有软件<br>●brew update                # 跟新brew软件自身<br>●brew upgrade name    # 更新安装过的软件,如果不加软件名，就更新所有可以更新的软件<br>●brew cleanup              # 清除下载的各种缓存<br>详见man brew</p>
<h2 id="brewcask"><a href="#brewcask" class="headerlink" title="brewcask"></a>brewcask</h2><p>brew cask是一个用命令行管理Mac下应用的工具，它是基于homebrew的一个增强工具。<br><code>brew install brew-cask</code></p>
<p>brew cask的常用命令<br>●brew cask search               # 列出所有可以被安装的软件<br>●brew cask search name     # 查找所有和 name相关的应用<br>●brew cask install name       # 下载安装软件<br>●brew cask uninstall name   # 卸载软件<br>●brew cask info app             # 列出应用的信息<br>●brew cask list                      # 列出本机按照过的软件列表<br>●brew cask cleanup              # 清除下载的缓存以及各种链接信息<br>PS:详见man brew cask</p>
<h1 id="on-my-zsh"><a href="#on-my-zsh" class="headerlink" title="on my zsh"></a>on my zsh</h1><p>wget 自动安装<br><code>wget https://github.com/robbyrussell/oh-my-zsh/raw/master/tools/install.sh -O - | sh</code></p>
<p>还有手动安装的方法，可以自行百度。<br><a href="https://github.com/robbyrussell/oh-my-zsh" target="_blank" rel="external">github源码</a></p>
<h1 id="sublime-text编辑器"><a href="#sublime-text编辑器" class="headerlink" title="sublime text编辑器"></a>sublime text编辑器</h1><p>个人非常推荐的一款编辑器，很强大。可以用brew安装</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Hello World]]></title>
      <url>wwww.mysite.com/2016/07/14/hello-world/</url>
      <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    </entry>
    
  
  
</search>
